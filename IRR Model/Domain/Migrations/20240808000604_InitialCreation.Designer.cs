// <auto-generated />
using System;
using IRR.Domain.IRR.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

/*namespace IRR.Migrations
{
    [DbContext(typeof(RevoContext))]
    [Migration("20240808000604_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("LossEvent_EventCode_Seq");

            modelBuilder.Entity("IRR.Domain.IRR.Model.AlphaGuAnalysis", b =>
                {
                    b.Property<int>("AlphaGuAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlphaGuAnalysisId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Platform")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SimYears")
                        .HasColumnType("int");

                    b.HasKey("AlphaGuAnalysisId")
                        .HasName("PK_dbo.AlphaGuAnalysis");

                    b.ToTable("AlphaGuAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AlphaModelAnalysis", b =>
                {
                    b.Property<int>("AlphaModelAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlphaModelAnalysisId"));

                    b.Property<decimal>("Alpha")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("AlphaGuAnalysisId")
                        .HasColumnType("int");

                    b.Property<decimal>("AttachmentPoint")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Cv")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CV");

                    b.Property<decimal>("DistributionLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("DistributionType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Peril")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("RandomSeed")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TargetEl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("TargetEL");

                    b.Property<decimal>("TargetLr")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("TargetLR");

                    b.HasKey("AlphaModelAnalysisId")
                        .HasName("PK_dbo.AlphaModelAnalysis");

                    b.HasIndex(new[] { "AlphaGuAnalysisId" }, "IX_AlphaGuAnalysisId");

                    b.ToTable("AlphaModelAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AppPref", b =>
                {
                    b.Property<int>("AppPrefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppPrefId"));

                    b.Property<int>("AppSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LegalRegion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value3")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("AppPrefId")
                        .HasName("PK_dbo.AppPref");

                    b.HasIndex("AppSectionId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Name", "LegalRegion", "AppSectionId", "UserId" }, "UQ_PrefName")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [LegalRegion] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("AppPref", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AppSection", b =>
                {
                    b.Property<int>("AppSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppSectionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DataType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AppSectionId")
                        .HasName("PK_dbo.AppSection");

                    b.HasIndex(new[] { "Name" }, "UQ_SectionName")
                        .IsUnique();

                    b.ToTable("AppSection", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AttrepTruncationSafeguard", b =>
                {
                    b.Property<string>("LatchTaskName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("latchTaskName");

                    b.Property<string>("LatchMachineGuid")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("latchMachineGUID");

                    b.Property<string>("LatchKey")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("LatchLocker")
                        .HasColumnType("datetime")
                        .HasColumnName("latchLocker");

                    b.HasKey("LatchTaskName", "LatchMachineGuid", "LatchKey")
                        .HasName("PK__attrep_t__65C99AC86CCB78C8");

                    b.ToTable("attrep_truncation_safeguard", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditDetail", b =>
                {
                    b.Property<int>("AuditDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditDetailId"));

                    b.Property<int>("AuditEventId")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("AuditDetailId")
                        .HasName("PK_dbo.AuditDetail");

                    b.HasIndex(new[] { "AuditEventId" }, "IX_AuditEventId");

                    b.ToTable("AuditDetail", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditEvent", b =>
                {
                    b.Property<int>("AuditEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditEventId"));

                    b.Property<int>("AuditTxnId")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("AuditEventId")
                        .HasName("PK_dbo.AuditEvent");

                    b.HasIndex(new[] { "AuditTxnId" }, "IX_AuditTxnId");

                    b.ToTable("AuditEvent", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditTxn", b =>
                {
                    b.Property<int>("AuditTxnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTxnId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuditTxnId")
                        .HasName("PK_dbo.AuditTxn");

                    b.ToTable("AuditTxn", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Broker", b =>
                {
                    b.Property<int>("BrokerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerId"));

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ArchAffiliate")
                        .HasColumnType("bit");

                    b.Property<int>("BrokerGroupId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DomicileCountry")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DomicileState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IrisbrokerCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISBrokerCode");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Region")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Website")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrokerId")
                        .HasName("PK_dbo.Broker");

                    b.HasIndex(new[] { "BrokerGroupId" }, "IX_BrokerGroupId");

                    b.HasIndex(new[] { "RegisId" }, "UQ_RegisIdBroker")
                        .IsUnique()
                        .HasFilter("([RegisId] IS NOT NULL AND [RegisId]<>'')");

                    b.ToTable("Broker", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.BrokerContact", b =>
                {
                    b.Property<int>("BrokerContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerContactId"));

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailPers")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneCell")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("BrokerContactId")
                        .HasName("PK_dbo.BrokerContact");

                    b.HasIndex(new[] { "BrokerId" }, "IX_BrokerId");

                    b.ToTable("BrokerContact", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.BrokerGroup", b =>
                {
                    b.Property<int>("BrokerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerGroupId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("BrokerGroupId")
                        .HasName("PK_dbo.BrokerGroup");

                    b.HasIndex(new[] { "RegisId" }, "UQ_RegisIdBrokerGroup")
                        .IsUnique()
                        .HasFilter("([RegisId] IS NOT NULL AND [RegisId]<>'')");

                    b.ToTable("BrokerGroup", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Cedent", b =>
                {
                    b.Property<int>("CedentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CedentId"));

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ArchAffiliate")
                        .HasColumnType("bit");

                    b.Property<int>("CedentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DomicileCountry")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DomicileState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FormerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("NameChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Region")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Website")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CedentId")
                        .HasName("PK_dbo.Cedent");

                    b.HasIndex(new[] { "CedentGroupId" }, "IX_CedentGroupId");

                    b.HasIndex(new[] { "RegisId" }, "UQ_RegisIdCedent")
                        .IsUnique()
                        .HasFilter("([RegisId] IS NOT NULL AND [RegisId]<>'')");

                    b.ToTable("Cedent", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.CedentContact", b =>
                {
                    b.Property<int>("CedentContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CedentContactId"));

                    b.Property<int>("CedentId")
                        .HasColumnType("int");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Events")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Interests")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CedentContactId")
                        .HasName("PK_dbo.CedentContact");

                    b.HasIndex(new[] { "CedentId" }, "IX_CedentId");

                    b.ToTable("CedentContact", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.CedentGroup", b =>
                {
                    b.Property<int>("CedentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CedentGroupId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CedentGroupId")
                        .HasName("PK_dbo.CedentGroup");

                    b.HasIndex(new[] { "RegisId" }, "UQ_RegisIdCedentGroup")
                        .IsUnique()
                        .HasFilter("([RegisId] IS NOT NULL AND [RegisId]<>'')");

                    b.ToTable("CedentGroup", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.CedentLoss", b =>
                {
                    b.Property<int>("CedentLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CedentLossId"));

                    b.Property<int?>("ClaimCount")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Division")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("IncurredLoss")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("LossEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PaidLoss")
                        .HasColumnType("float");

                    b.Property<string>("Product")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValuationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CedentLossId")
                        .HasName("PK_dbo.CedentLoss");

                    b.ToTable("CedentLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemo", b =>
                {
                    b.Property<int>("ClientMemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMemoId"));

                    b.Property<string>("ArchRep")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("BrokerRep")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Conference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lob")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("LOB");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationFollowup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("MeetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Memo")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MonthFollowup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Unit")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClientMemoId")
                        .HasName("PK_dbo.ClientMemo");

                    b.HasIndex(new[] { "BrokerId" }, "IX_BrokerId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("ClientMemo", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemoCedent", b =>
                {
                    b.Property<int>("ClientMemoCedentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMemoCedentId"));

                    b.Property<int>("CedentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientMemoId")
                        .HasColumnType("int");

                    b.Property<string>("ClientRep")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ClientMemoCedentId")
                        .HasName("PK_dbo.ClientMemoCedent");

                    b.HasIndex(new[] { "CedentId" }, "IX_CedentId");

                    b.HasIndex(new[] { "ClientMemoId" }, "IX_ClientMemoId");

                    b.ToTable("ClientMemoCedent", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemoDoc", b =>
                {
                    b.Property<int>("ClientMemoDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMemoDocId"));

                    b.Property<int>("ClientMemoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DbfileId")
                        .HasColumnType("int")
                        .HasColumnName("DBFileId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ClientMemoDocId")
                        .HasName("PK_dbo.ClientMemoDoc");

                    b.HasIndex(new[] { "ClientMemoId" }, "IX_ClientMemoId");

                    b.HasIndex(new[] { "DbfileId" }, "IX_DBFileId");

                    b.ToTable("ClientMemoDoc", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultDomain")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DefaultEmail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<int?>("DefaultReinsurerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LegalEntCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("LegalRegion")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CompanyId")
                        .HasName("PK_dbo.Company");

                    b.HasIndex(new[] { "LegalEntCode" }, "IX_LegalEntCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_Name")
                        .IsUnique();

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int?>("AcctBrokerId")
                        .HasColumnType("int");

                    b.Property<string>("AcctBrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdjustmentBaseType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("AggLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AggRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AttachBasis")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("BoundFxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BoundFXDate");

                    b.Property<decimal?>("BoundFxrate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BoundFXRate");

                    b.Property<string>("BrokerRef")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("Ccfyears")
                        .HasColumnType("int")
                        .HasColumnName("CCFYears");

                    b.Property<decimal>("CessionTotal")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CommOverride")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("ContractBinderId")
                        .HasColumnType("int");

                    b.Property<int>("ContractBinderType")
                        .HasColumnType("int");

                    b.Property<decimal>("ContractLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContractType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("CorreAuthMax")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreAuthMin")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreAuthTarget")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreRenewalMin")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Dcfamount")
                        .HasColumnType("int")
                        .HasColumnName("DCFAmount");

                    b.Property<int>("Dcfyears")
                        .HasColumnType("int")
                        .HasColumnName("DCFYears");

                    b.Property<decimal?>("DisplayShareLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiversificationFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("EarningType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("Erc")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ERC");

                    b.Property<string>("EventNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationFinal")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpiringCorreShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int?>("ExpiringLayerId")
                        .HasColumnType("int");

                    b.Property<string>("ExpiringLayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fhcfband")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("FHCFBand");

                    b.Property<decimal>("Franchise")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FranchiseReverse")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FrontingFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossUpFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("Inception")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvestmentReturn")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAggUnlimited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommonAcct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGrossUpComm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLossCorridor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccUnlimited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfitComm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlidingScale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStopLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVarComm")
                        .HasColumnType("bit");

                    b.Property<string>("Laeterm")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("LAETerm");

                    b.Property<string>("LayerCatalog")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LayerCategory")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LayerDesc")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("LayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LayerNum")
                        .HasColumnType("int");

                    b.Property<string>("LayerType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LimitBasis")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Lob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LOB");

                    b.Property<decimal>("LossCorridorBeginPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossCorridorCedePct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossCorridorEndPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossDuration")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("LossTrigger")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NonCatMarginAllowance")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("OccLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("OccLimitInPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("OccRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("OccRetnInPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("OtherExpenses")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("PcstartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PCStartDate");

                    b.Property<decimal>("Placement")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PremiumFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("PremiumFreq")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("ProfitComm")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisMkey")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegisMKey");

                    b.Property<string>("RegisMsg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegisNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RegisStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReinstatementsDisplayFull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReinstatementsDisplayShort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReinsurerExpenses")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("ReserveFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("RiskLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RiskRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RiskZoneId")
                        .HasColumnType("int");

                    b.Property<string>("RiskZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Share")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("ShareLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SharePremium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SharedToCorre")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SnpLobId")
                        .HasColumnType("int");

                    b.Property<string>("SnpLobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SscommMax")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommMax");

                    b.Property<decimal>("SscommMin")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommMin");

                    b.Property<decimal>("SscommProv")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommProv");

                    b.Property<decimal>("SslossRatioMax")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioMax");

                    b.Property<decimal>("SslossRatioMin")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioMin");

                    b.Property<decimal>("SslossRatioProv")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioProv");

                    b.Property<decimal>("StopLossAttachPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("StopLossLimitPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("SubLayerNum")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("TopUpZone")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TopUpZoneId")
                        .HasColumnType("int");

                    b.Property<int>("Uwyear")
                        .HasColumnType("int")
                        .HasColumnName("UWYear");

                    b.Property<decimal>("VarCommHi")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("VarCommLow")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Warnings")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("ContractId")
                        .HasName("PK_dbo.Contract");

                    b.HasIndex(new[] { "ContractBinderId" }, "IX_ContractBinderId");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractBinder", b =>
                {
                    b.Property<int>("ContractBinderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractBinderId"));

                    b.Property<DateTime?>("ActuarialDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActuarialPriority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActuarialRanking")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActuarialStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ActuaryId")
                        .HasColumnType("int");

                    b.Property<string>("ActuaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnalystId")
                        .HasColumnType("int");

                    b.Property<string>("AnalystName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("BrokerContactId")
                        .HasColumnType("int");

                    b.Property<string>("BrokerContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("BrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrokerOfficeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrokerRating")
                        .HasColumnType("int");

                    b.Property<string>("BrokerRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CedentId")
                        .HasColumnType("int");

                    b.Property<string>("CedentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChangeType")
                        .HasColumnType("int");

                    b.Property<int>("ClientAdvocacyRating")
                        .HasColumnType("int");

                    b.Property<string>("ClientAdvocacyRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractBinderNotes")
                        .HasColumnType("ntext");

                    b.Property<int>("ContractBinderType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CorreAuthDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("CorreStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("DeptName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDefault")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpiringSubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("ExpiringSubmissionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FxDateSbf")
                        .HasColumnType("datetime2")
                        .HasColumnName("FxDateSBF");

                    b.Property<decimal?>("FxRateSbfgbp")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FxRateSBFGBP");

                    b.Property<decimal?>("FxRateSbfusd")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FxRateSBFUSD");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<decimal>("Fxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FXRate");

                    b.Property<decimal>("GrossLimitAuth")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossLimitAuthExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossLimitBoundNew")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossLimitBoundNewExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossLimitMultiYrIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossLimitMultiYrIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossLimitQuote")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossLimitQuoteExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossLimitTotalIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossLimitTotalIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossPremAuth")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossPremAuthExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossPremBoundNew")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossPremBoundNewExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossPremMultiYrIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossPremMultiYrIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossPremQuote")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossPremQuoteExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossPremTotalIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrossPremTotalIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InceptionDefault")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Insured")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancellable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiyear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRenewal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MdlStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModelerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelingComplexity")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModelingStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NetLimitAuth")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetLimitAuthExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetLimitBoundNew")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetLimitBoundNewExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetLimitMultiYrIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetLimitMultiYrIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetLimitQuote")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetLimitQuoteExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetLimitTotalIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetLimitTotalIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetPremAuth")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetPremAuthExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetPremBoundNew")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetPremBoundNewExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetPremMultiYrIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetPremMultiYrIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetPremQuote")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetPremQuoteExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetPremTotalIf")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NetPremTotalIfExpiring")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("OfficeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("QsofXs")
                        .HasColumnType("bit")
                        .HasColumnName("QSofXS");

                    b.Property<string>("Rationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReinsurerId")
                        .HasColumnType("int");

                    b.Property<string>("ReinsurerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelshipUnderwriterId")
                        .HasColumnType("int");

                    b.Property<string>("RelshipUnderwriterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StrategicNotes")
                        .HasColumnType("ntext");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionStatus")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TranType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UnderwriterId")
                        .HasColumnType("int");

                    b.Property<string>("UnderwriterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UwyearDefault")
                        .HasColumnType("int")
                        .HasColumnName("UWYearDefault");

                    b.Property<int?>("UwyearDefaultExpiring")
                        .HasColumnType("int")
                        .HasColumnName("UWYearDefaultExpiring");

                    b.Property<string>("Warnings")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("YoySummaryCurrencyAndAmountSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("YoySummaryDivisor")
                        .HasColumnType("bigint");

                    b.HasKey("ContractBinderId")
                        .HasName("PK_dbo.ContractBinder");

                    b.HasIndex(new[] { "DocId" }, "IX_DocId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.ToTable("ContractBinder", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractClause", b =>
                {
                    b.Property<int>("ContractClauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractClauseId"));

                    b.Property<int>("ClauseType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContractClauseId")
                        .HasName("PK_dbo.ContractClause");

                    b.HasIndex(new[] { "Code" }, "UQ_ClauseCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_ClauseName")
                        .IsUnique();

                    b.ToTable("ContractClause", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewer", b =>
                {
                    b.Property<int>("ContractReviewerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractReviewerId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractBinderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContractReviewerId")
                        .HasName("PK_dbo.ContractReviewer");

                    b.HasIndex(new[] { "ContractBinderId" }, "IX_ContractBinderId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("ContractReviewer", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewerCriterion", b =>
                {
                    b.Property<int>("ContractReviewerCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractReviewerCriteriaId"));

                    b.Property<int>("ContractReviewerRuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FilterCriteriaPropertyType")
                        .HasColumnType("int");

                    b.Property<string>("FilterCriteriaValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContractReviewerCriteriaId")
                        .HasName("PK_dbo.ContractReviewerCriteria");

                    b.HasIndex(new[] { "ContractReviewerRuleId" }, "IX_ContractReviewerRuleId");

                    b.ToTable("ContractReviewerCriteria");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewerRule", b =>
                {
                    b.Property<int>("ContractReviewerRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractReviewerRuleId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContractReviewerRuleId")
                        .HasName("PK_dbo.ContractReviewerRule");

                    b.HasIndex(new[] { "ReviewerId" }, "IX_ReviewerId");

                    b.ToTable("ContractReviewerRule", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Dbfile", b =>
                {
                    b.Property<int>("DbfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DBFileId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DbfileId"));

                    b.Property<byte[]>("FileData")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("DbfileId")
                        .HasName("PK_dbo.DBFile");

                    b.ToTable("DBFile", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.DeltaPxResult", b =>
                {
                    b.Property<int>("DeltaPxResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeltaPxResultId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("GrossCapitalTvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVarAuth");

                    b.Property<double?>("GrossCapitalTvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVarQuote");

                    b.Property<double?>("GrossCapitalTvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVarSigned");

                    b.Property<double?>("GrossCapitalVarAuth")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCapitalVarQuote")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCapitalVarSigned")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlTvarArlAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArlAuth");

                    b.Property<double?>("GrossCatPmlTvarArlQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArlQuote");

                    b.Property<double?>("GrossCatPmlTvarArlSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArlSigned");

                    b.Property<double?>("GrossCatPmlVarArlAuth")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlVarArlQuote")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlVarArlSigned")
                        .HasColumnType("float");

                    b.Property<double?>("GrossRoetvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVarAuth");

                    b.Property<double?>("GrossRoetvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVarQuote");

                    b.Property<double?>("GrossRoetvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVarSigned");

                    b.Property<double?>("GrossRoevarAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarAuth");

                    b.Property<double?>("GrossRoevarCorreAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarCorreAuth");

                    b.Property<double?>("GrossRoevarCorreQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarCorreQuote");

                    b.Property<double?>("GrossRoevarQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarQuote");

                    b.Property<double?>("GrossRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarSigned");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxCatPts")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("NetCapitalTvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVarAuth");

                    b.Property<double?>("NetCapitalTvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVarQuote");

                    b.Property<double?>("NetCapitalTvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVarSigned");

                    b.Property<double?>("NetCapitalVarAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetCapitalVarQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetCapitalVarSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArlAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArlQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArlSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlTvarArlAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArlAuth");

                    b.Property<double?>("NetCatPmlTvarArlQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArlQuote");

                    b.Property<double?>("NetCatPmlTvarArlSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArlSigned");

                    b.Property<double?>("NetExcessReturnAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFeesAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFeesQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFeesSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVarAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVarQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVarSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinRoevarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVarAuth");

                    b.Property<double?>("NetMinRoevarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVarQuote");

                    b.Property<double?>("NetMinRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVarSigned");

                    b.Property<double?>("NetRoetvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVarAuth");

                    b.Property<double?>("NetRoetvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVarQuote");

                    b.Property<double?>("NetRoetvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVarSigned");

                    b.Property<double?>("NetRoevarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarAuth");

                    b.Property<double?>("NetRoevarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarQuote");

                    b.Property<double?>("NetRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarSigned");

                    b.Property<double?>("NetRoevarWithFeesAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFeesAuth");

                    b.Property<double?>("NetRoevarWithFeesQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFeesQuote");

                    b.Property<double?>("NetRoevarWithFeesSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFeesSigned");

                    b.Property<string>("ReasonStaleAuth")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ReasonStaleQuote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ReasonStaleSigned")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubmissionPxPortfolioId")
                        .HasColumnType("int");

                    b.Property<double?>("TargetRoeAuth")
                        .HasColumnType("float");

                    b.Property<double?>("TargetRoeQuote")
                        .HasColumnType("float");

                    b.Property<double?>("TargetRoeSigned")
                        .HasColumnType("float");

                    b.HasKey("DeltaPxResultId")
                        .HasName("PK_dbo.DeltaPxResult");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "SubmissionPxPortfolioId" }, "IX_SubmissionPxPortfolioId");

                    b.HasIndex(new[] { "SubmissionPxPortfolioId", "LayerId" }, "UQ_DeltaPxResult")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1) AND [IsDeleted]=(0))");

                    b.ToTable("DeltaPxResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.DeltaPxResultContract", b =>
                {
                    b.Property<int>("DeltaPxResultContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeltaPxResultContractId"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("GrossCapitalTvar")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVar");

                    b.Property<double?>("GrossCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlTvarArl")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArl");

                    b.Property<double?>("GrossCatPmlVarArl")
                        .HasColumnType("float");

                    b.Property<double?>("GrossRoetvar")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVar");

                    b.Property<double?>("GrossRoevar")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVar");

                    b.Property<double?>("GrossRoevarCorre")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarCorre");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LossView")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("MaxCatPts")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("NetCapitalTvar")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVar");

                    b.Property<double?>("NetCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArl")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlTvarArl")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArl");

                    b.Property<double?>("NetExcessReturn")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFees")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinRoevar")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVar");

                    b.Property<double?>("NetRoetvar")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVar");

                    b.Property<double?>("NetRoevar")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVar");

                    b.Property<double?>("NetRoevarWithFees")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFees");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonStale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("TargetRoe")
                        .HasColumnType("float");

                    b.HasKey("DeltaPxResultContractId")
                        .HasName("PK_dbo.DeltaPxResultContract");

                    b.HasIndex(new[] { "ContractId" }, "IX_ContractId");

                    b.ToTable("DeltaPxResultContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Dept", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeptEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("DeptId")
                        .HasName("PK_dbo.Dept");

                    b.HasIndex("OfficeId");

                    b.HasIndex(new[] { "Name", "OfficeId" }, "UQ_DeptOffice")
                        .IsUnique();

                    b.ToTable("Dept", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Doc", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DbfileId")
                        .HasColumnType("int")
                        .HasColumnName("DBFileId");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStale")
                        .HasColumnType("bit");

                    b.Property<string>("Layers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("DocId")
                        .HasName("PK_dbo.Doc");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.ToTable("Doc", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ExperienceLoss", b =>
                {
                    b.Property<int>("ExperienceLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceLossId"));

                    b.Property<double>("ActualIncurredLoss")
                        .HasColumnType("float");

                    b.Property<double?>("ActualPaidLoss")
                        .HasColumnType("float");

                    b.Property<string>("AreaCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("AsIfIncurredLoss")
                        .HasColumnType("float");

                    b.Property<int?>("ClaimsCount")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("Division")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EventName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventUniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventYear")
                        .HasColumnType("int");

                    b.Property<double>("ExposureAdjustment")
                        .HasColumnType("float");

                    b.Property<double>("ExposureFactor")
                        .HasColumnType("float");

                    b.Property<int>("GeographyId")
                        .HasColumnType("int");

                    b.Property<double>("IncurredLdfs")
                        .HasColumnType("float");

                    b.Property<string>("IndustryEventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("LineOfBusiness")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<int?>("LossEventId")
                        .HasColumnType("int");

                    b.Property<double?>("MarketShare")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PcscatNum")
                        .HasColumnType("int")
                        .HasColumnName("PCSCatNum");

                    b.Property<string>("Peril")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ReportedPeril")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SelectedLayers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SeverityTrend")
                        .HasColumnType("float");

                    b.Property<string>("SubareaCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TotalExposureAdjustedLoss")
                        .HasColumnType("float");

                    b.Property<double>("TrendedLoss")
                        .HasColumnType("float");

                    b.Property<int>("TrendedLossSelector")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValuationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExperienceLossId")
                        .HasName("PK_dbo.ExperienceLoss");

                    b.HasIndex(new[] { "GeographyId" }, "IX_GeographyId");

                    b.HasIndex(new[] { "LossEstScenarioId" }, "IX_LossEstScenarioId");

                    b.HasIndex(new[] { "LossEventId" }, "IX_LossEventId");

                    b.HasIndex(new[] { "LossEstScenarioId", "LossEventId", "DataSource", "ValuationDate", "EventYear", "EventName", "Peril", "CountryCode", "AreaCode", "Division", "LineOfBusiness" }, "UQ_ExperienceLoss")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1) AND [LossEventId] IS NOT NULL)");

                    b.ToTable("ExperienceLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.FxRateSbf", b =>
                {
                    b.Property<int>("FxRateSbfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FxRateSBFId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FxRateSbfid"));

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("FxRateSbfid")
                        .HasName("PK_dbo.FxRateSBF");

                    b.HasIndex(new[] { "BaseCurrency", "Currency", "Fxdate" }, "UQ_FXRateSBF")
                        .IsUnique();

                    b.ToTable("FxRateSBF", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Fxrate", b =>
                {
                    b.Property<int>("FxrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FXRateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FxrateId"));

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("FxrateId")
                        .HasName("PK_dbo.FXRate");

                    b.HasIndex(new[] { "BaseCurrency", "Currency", "Fxdate" }, "UQ_FXRate")
                        .IsUnique();

                    b.ToTable("FXRate", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Geography", b =>
                {
                    b.Property<int>("GeographyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeographyId"));

                    b.Property<string>("AreaCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AreaName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Crestacode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CRESTACode");

                    b.Property<string>("Crestaname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CRESTAName");

                    b.Property<string>("GeoLevelCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentGeographyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SubareaCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubareaName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GeographyId")
                        .HasName("PK_dbo.Geography");

                    b.HasIndex(new[] { "SubareaCode", "AreaCode" }, "IXGeography_AreaSubArea");

                    b.HasIndex(new[] { "ParentGeographyId" }, "IX_ParentGeographyId");

                    b.ToTable("Geography", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuAnalysis", b =>
                {
                    b.Property<int>("GuAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuAnalysisId"));

                    b.Property<int>("AdjustmentType")
                        .HasColumnType("int");

                    b.Property<string>("CompatibleVersions")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Database")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExtJobId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExtJobStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("GuAnalysisGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<int>("LossDetailType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Perils")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RunStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Server")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SimYears")
                        .HasColumnType("int");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<bool>("UseSwift")
                        .HasColumnType("bit");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("YeltGeoRowCount")
                        .HasColumnType("int");

                    b.Property<int>("YeltRowCount")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneDefinitionId")
                        .HasColumnType("int");

                    b.HasKey("GuAnalysisId")
                        .HasName("PK_dbo.GuAnalysis");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.HasIndex(new[] { "ZoneDefinitionId" }, "IX_ZoneDefinitionId");

                    b.ToTable("GuAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuCurveAdjDef", b =>
                {
                    b.Property<int>("GuCurveAdjDefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuCurveAdjDefId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PmlType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SourceGuAnalysisId")
                        .HasColumnType("int");

                    b.Property<int>("TargetGuAnalysisId")
                        .HasColumnType("int");

                    b.HasKey("GuCurveAdjDefId")
                        .HasName("PK_dbo.GuCurveAdjDef");

                    b.HasIndex(new[] { "SourceGuAnalysisId" }, "IX_SourceGuAnalysisId");

                    b.HasIndex(new[] { "TargetGuAnalysisId" }, "IX_TargetGuAnalysisId");

                    b.ToTable("GuCurveAdjDef", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuCurveAdjPmlSrc", b =>
                {
                    b.Property<int>("GuCurveAdjPmlSrcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuCurveAdjPmlSrcId"));

                    b.Property<double>("Aep")
                        .HasColumnType("float")
                        .HasColumnName("AEP");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("FrequencyFactor")
                        .HasColumnType("float");

                    b.Property<int>("GuCurveAdjDefId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MajorZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Oep")
                        .HasColumnType("float")
                        .HasColumnName("OEP");

                    b.Property<string>("Peril")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReturnPeriod")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("SeverityFactor")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuCurveAdjPmlSrcId")
                        .HasName("PK_dbo.GuCurveAdjPmlSrc");

                    b.HasIndex(new[] { "GuCurveAdjDefId" }, "IX_GuCurveAdjDefId");

                    b.ToTable("GuCurveAdjPmlSrc", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryCalibrationAnalysis", b =>
                {
                    b.Property<int>("IndustryCalibrationAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryCalibrationAnalysisId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Peril")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Platform")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IndustryCalibrationAnalysisId")
                        .HasName("PK_dbo.IndustryCalibrationAnalysis");

                    b.ToTable("IndustryCalibrationAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryCalibrationDef", b =>
                {
                    b.Property<int>("IndustryCalibrationDefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryCalibrationDefId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SourceGuAnalysisId")
                        .HasColumnType("int");

                    b.Property<int>("SourceIndustryCalibrationAnalysisId")
                        .HasColumnType("int");

                    b.Property<int>("TargetGuAnalysisId")
                        .HasColumnType("int");

                    b.HasKey("IndustryCalibrationDefId")
                        .HasName("PK_dbo.IndustryCalibrationDef");

                    b.HasIndex(new[] { "SourceGuAnalysisId" }, "IX_SourceGuAnalysisId");

                    b.HasIndex(new[] { "SourceIndustryCalibrationAnalysisId" }, "IX_SourceIndustryCalibrationAnalysisId");

                    b.HasIndex(new[] { "TargetGuAnalysisId" }, "IX_TargetGuAnalysisId");

                    b.ToTable("IndustryCalibrationDef", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryGuAnalysis", b =>
                {
                    b.Property<int>("IndustryGuAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryGuAnalysisId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Peril")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Platform")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IndustryGuAnalysisId")
                        .HasName("PK_dbo.IndustryGuAnalysis");

                    b.ToTable("IndustryGuAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLoss", b =>
                {
                    b.Property<int>("IndustryLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryLossId"));

                    b.Property<double?>("AutoAvgPmt")
                        .HasColumnType("float");

                    b.Property<double?>("AutoClaimCount")
                        .HasColumnType("float");

                    b.Property<double?>("AutoLoss")
                        .HasColumnType("float");

                    b.Property<double?>("ComAvgPmt")
                        .HasColumnType("float");

                    b.Property<double?>("ComClaimCount")
                        .HasColumnType("float");

                    b.Property<double?>("ComLoss")
                        .HasColumnType("float");

                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<double>("EstInsPmt")
                        .HasColumnType("float");

                    b.Property<string>("EstType")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("GeographyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("LossEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OnLevelDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<double>("OnLevelLoss")
                        .HasColumnType("float");

                    b.Property<double?>("PersAvgPmt")
                        .HasColumnType("float");

                    b.Property<double?>("PersClaimCount")
                        .HasColumnType("float");

                    b.Property<double?>("PersLoss")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Source")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("WcavgPmt")
                        .HasColumnType("float")
                        .HasColumnName("WCAvgPmt");

                    b.Property<double?>("WcclaimCount")
                        .HasColumnType("float")
                        .HasColumnName("WCClaimCount");

                    b.Property<double?>("Wcloss")
                        .HasColumnType("float")
                        .HasColumnName("WCLoss");

                    b.HasKey("IndustryLossId")
                        .HasName("PK_dbo.IndustryLoss");

                    b.HasIndex(new[] { "GeographyId" }, "IX_GeographyId");

                    b.HasIndex(new[] { "LossEventId" }, "IX_LossEventId");

                    b.ToTable("IndustryLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossFilter", b =>
                {
                    b.Property<int>("IndustryLossFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryLossFilterId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("EventThreshold")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PerilCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SelectedGeographyIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("IndustryLossFilterId")
                        .HasName("PK_dbo.IndustryLossFilter");

                    b.ToTable("IndustryLossFilter", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossRegion", b =>
                {
                    b.Property<int>("IndustryLossRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryLossRegionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("IndustryLossRegionId")
                        .HasName("PK_dbo.IndustryLossRegion");

                    b.HasIndex(new[] { "Name" }, "UQ_IndustryLossRegion")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("IndustryLossRegion", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossSubRegion", b =>
                {
                    b.Property<int>("IndustryLossSubRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryLossSubRegionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GeographyId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryLossRegionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("IndustryLossSubRegionId")
                        .HasName("PK_dbo.IndustryLossSubRegion");

                    b.HasIndex("GeographyId");

                    b.HasIndex(new[] { "IndustryLossRegionId", "GeographyId", "Name" }, "UQ_IndustryLossSubRegion")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("IndustryLossSubRegion", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryOnLevelLoss", b =>
                {
                    b.Property<int>("IndustryOnLevelLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryOnLevelLossId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IndustryLossId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OnLevelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OnLevelLoss")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("IndustryOnLevelLossId")
                        .HasName("PK_dbo.IndustryOnLevelLoss");

                    b.HasIndex(new[] { "IndustryLossId" }, "IX_IndustryLossId");

                    b.ToTable("IndustryOnLevelLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Layer", b =>
                {
                    b.Property<int>("LayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerId"));

                    b.Property<decimal>("Aad")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AAD");

                    b.Property<int?>("AcctBrokerId")
                        .HasColumnType("int");

                    b.Property<int>("AdjustmentBaseType")
                        .HasColumnType("int");

                    b.Property<decimal>("AggLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AggRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AttachBasis")
                        .HasColumnType("int");

                    b.Property<decimal>("AuthCorreShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("AuthExpire")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AuthShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("BoundFxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BoundFXDate");

                    b.Property<decimal?>("BoundFxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("BoundFXRate");

                    b.Property<string>("BrokerRef")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("BurnReported")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("BurnTrended")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CascadeRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CatLoss1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CatLoss2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CatLoss3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Ccfyears")
                        .HasColumnType("int")
                        .HasColumnName("CCFYears");

                    b.Property<decimal?>("Cloud")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ComAccountProtect")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CommOverride")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<decimal>("CorreAuthMax")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreAuthMin")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreAuthTarget")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CorreRenewalMin")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Dcfamount")
                        .HasColumnType("int")
                        .HasColumnName("DCFAmount");

                    b.Property<int>("Dcfyears")
                        .HasColumnType("int")
                        .HasColumnName("DCFYears");

                    b.Property<string>("DeclineReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("DiversificationFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("EarningType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Elbroker")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELBroker");

                    b.Property<decimal?>("ElhistoricalBurn")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELHistoricalBurn");

                    b.Property<decimal?>("ElmarketShare")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELMarketShare");

                    b.Property<decimal?>("Erc")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ERC");

                    b.Property<decimal?>("Ercactual")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ERCActual");

                    b.Property<string>("ErcactualSource")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ERCActualSource");

                    b.Property<decimal>("Ercmid")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ERCMid");

                    b.Property<decimal>("Ercmodel")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ERCModel");

                    b.Property<decimal>("Ercpareto")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ERCPareto");

                    b.Property<decimal?>("Ercquote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 10)")
                        .HasDefaultValue(0m)
                        .HasColumnName("ERCQuote");

                    b.Property<decimal>("EstimatedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("EventNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("ExpectedGrossNetPremiumGbp")
                        .HasColumnType("float")
                        .HasColumnName("ExpectedGrossNetPremiumGBP");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationFinal")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpiringCorreShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int?>("ExpiringLayerId")
                        .HasColumnType("int");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Fhcfband")
                        .HasColumnType("int")
                        .HasColumnName("FHCFBand");

                    b.Property<decimal>("Franchise")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FranchiseReverse")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FrontingFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossUpFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("Inception")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InuringLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InvestmentReturn")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("IrisbranchCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISBranchCode");

                    b.Property<string>("IrisclassCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISClassCode");

                    b.Property<string>("Iriscomments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISComments");

                    b.Property<string>("IrisplacingCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISPlacingCode");

                    b.Property<string>("IrispolicySeqNumber")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("IRISPolicySeqNumber");

                    b.Property<string>("IrisproductCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISProductCode");

                    b.Property<int>("IrisrefId")
                        .HasColumnType("int")
                        .HasColumnName("IRISRefId");

                    b.Property<int>("Irisstatus")
                        .HasColumnType("int")
                        .HasColumnName("IRISStatus");

                    b.Property<string>("IristradeCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISTradeCode");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommonAcct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDifferentialTerms")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGrossUpComm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLossCorridor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParametric")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfitComm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlidingScale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStopLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerrorismSubLimitAppl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVarComm")
                        .HasColumnType("bit");

                    b.Property<int>("Laeterm")
                        .HasColumnType("int")
                        .HasColumnName("LAETerm");

                    b.Property<string>("LayerCatalog")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LayerCategory")
                        .HasColumnType("int");

                    b.Property<string>("LayerDesc")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("LayerNum")
                        .HasColumnType("int");

                    b.Property<int>("LayerType")
                        .HasColumnType("int");

                    b.Property<int>("LimitBasis")
                        .HasColumnType("int");

                    b.Property<decimal?>("LloydsCapital")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("LloydsRoc")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LloydsROC");

                    b.Property<string>("Lob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LOB");

                    b.Property<decimal>("LossCorridorBeginPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossCorridorCedePct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossCorridorEndPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossDuration")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("LossTrigger")
                        .HasColumnType("int");

                    b.Property<int?>("Maol")
                        .HasColumnType("int")
                        .HasColumnName("MAOL");

                    b.Property<decimal>("MktRol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("MktROL");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Ncbr")
                        .HasColumnType("bit")
                        .HasColumnName("NCBR");

                    b.Property<decimal>("NonCatMarginAllowance")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("NonCatWeightPc")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("NonCatWeightPC");

                    b.Property<decimal?>("NonCatWeightSs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("NonCatWeightSS");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("OccLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("OccLimitInPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("OccRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("OccRetnInPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("OrderPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("OtherExpenses")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("PcstartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PCStartDate");

                    b.Property<decimal>("Placement")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PremiumFreq")
                        .HasColumnType("int");

                    b.Property<int>("PricingSource")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitComm")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("ProfitCommissionExpAllowance")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("QuoteExpire")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("QuotePremium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("QuoteRol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("QuoteROL");

                    b.Property<decimal>("QuotedCorreShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("QuotedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("Ransom")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisIdCt")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisLayerCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RegisMkey")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegisMKey");

                    b.Property<string>("RegisMsg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegisNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisNbrCt")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RegisStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReinstCount")
                        .HasColumnType("int");

                    b.Property<decimal>("ReinsurerExpenses")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("RelShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("RiskLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RiskRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RiskZoneId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<decimal>("RolRpp")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SharedToCorre")
                        .HasColumnType("int");

                    b.Property<decimal>("SignedCorreShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("SignedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int?>("SnpLobId")
                        .HasColumnType("int");

                    b.Property<string>("SourceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SscommMax")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommMax");

                    b.Property<decimal>("SscommMin")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommMin");

                    b.Property<decimal>("SscommProv")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommProv");

                    b.Property<decimal>("SslossRatioMax")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioMax");

                    b.Property<decimal>("SslossRatioMin")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioMin");

                    b.Property<decimal>("SslossRatioProv")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioProv");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("StopLossAttachPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("StopLossBufferPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("StopLossLimitPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("SubLayerNum")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetNetShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("TerrorismSubLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TerrorismSubLimitComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopUpZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Uwyear")
                        .HasColumnType("int")
                        .HasColumnName("UWYear");

                    b.Property<decimal>("Var1Retention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Var2Retention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("VarCommHi")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("VarCommLow")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("Wilresolution")
                        .HasColumnType("int")
                        .HasColumnName("WILResolution");

                    b.Property<int>("YearPeriodLoss")
                        .HasColumnType("int");

                    b.Property<int>("YearPeriodSelected")
                        .HasColumnType("int");

                    b.HasKey("LayerId")
                        .HasName("PK_dbo.Layer");

                    b.HasIndex(new[] { "AcctBrokerId" }, "IX_AcctBrokerId");

                    b.HasIndex(new[] { "ExpiringLayerId" }, "IX_ExpiringLayerId");

                    b.HasIndex(new[] { "RiskZoneId" }, "IX_RiskZoneId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.HasIndex(new[] { "RegisId" }, "UQ_RegisIdLayer")
                        .IsUnique()
                        .HasFilter("([RegisId] IS NOT NULL AND [RegisId]<>'' AND [RegisId]<>'0' AND [IsDeleted]=(0) AND [IsActive]=(1))");

                    b.HasIndex(new[] { "SourceId" }, "UQ_SourceId")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1) AND [IsDeleted]=(0) AND ([SourceId] IS NOT NULL AND [SourceId]<>''))");

                    b.ToTable("Layer", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerExperienceLoss", b =>
                {
                    b.Property<int>("LayerExperienceLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerExperienceLossId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ExperienceLossId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LayerLoss")
                        .HasColumnType("float");

                    b.Property<int>("LayerLossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LayerExperienceLossId")
                        .HasName("PK_dbo.LayerExperienceLoss");

                    b.HasIndex(new[] { "ExperienceLossId" }, "IX_ExperienceLossId");

                    b.HasIndex(new[] { "LayerLossEstScenarioId" }, "IX_LayerLossEstScenarioId");

                    b.HasIndex(new[] { "ExperienceLossId", "LayerLossEstScenarioId" }, "UQ_LayerExperienceLoss")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("LayerExperienceLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerLossAnalysis", b =>
                {
                    b.Property<int>("LayerLossAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerLossAnalysisId"));

                    b.Property<int?>("AlphaGuAnalysisId")
                        .HasColumnType("int");

                    b.Property<double>("CatPml")
                        .HasColumnType("float");

                    b.Property<double>("CatPmlQuote")
                        .HasColumnType("float");

                    b.Property<decimal>("CedentCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentCS");

                    b.Property<decimal>("CedentEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentEQ");

                    b.Property<decimal>("CedentFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentFL");

                    b.Property<decimal>("CedentWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentWF");

                    b.Property<decimal>("CedentWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentWS");

                    b.Property<decimal>("CedentWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentWT");

                    b.Property<decimal>("Cr")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("El")
                        .HasColumnType("float")
                        .HasColumnName("EL");

                    b.Property<decimal>("Elattritional")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELAttritional");

                    b.Property<decimal>("EllargeLoss")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELLargeLoss");

                    b.Property<decimal>("Elmodeled")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELModeled");

                    b.Property<decimal>("ElnonModeled")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELNonModeled");

                    b.Property<decimal>("Er")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ER");

                    b.Property<decimal>("GrowthCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthCS");

                    b.Property<decimal>("GrowthEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthEQ");

                    b.Property<decimal>("GrowthFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthFL");

                    b.Property<decimal>("GrowthWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthWF");

                    b.Property<decimal>("GrowthWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthWS");

                    b.Property<decimal>("GrowthWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthWT");

                    b.Property<int?>("GuAnalysisId")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeAttritional")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeLargeLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeModeled")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNonModel")
                        .HasColumnType("bit");

                    b.Property<decimal>("Inflation")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LaeCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeCS");

                    b.Property<decimal>("LaeEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeEQ");

                    b.Property<decimal>("LaeFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeFL");

                    b.Property<decimal>("LaeWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeWF");

                    b.Property<decimal>("LaeWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeWS");

                    b.Property<decimal>("LaeWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeWT");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LossAnalysisId")
                        .HasColumnType("int");

                    b.Property<decimal>("Lr")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LR");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PerilCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilCS");

                    b.Property<decimal>("PerilEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilEQ");

                    b.Property<decimal>("PerilFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilFL");

                    b.Property<decimal>("PerilWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilWF");

                    b.Property<decimal>("PerilWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilWS");

                    b.Property<decimal>("PerilWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilWT");

                    b.Property<double>("Rb")
                        .HasColumnType("float")
                        .HasColumnName("RB");

                    b.Property<string>("ReasonStale")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Rp")
                        .HasColumnType("float")
                        .HasColumnName("RP");

                    b.Property<decimal>("SocialCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialCS");

                    b.Property<decimal>("SocialEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialEQ");

                    b.Property<decimal>("SocialFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialFL");

                    b.Property<decimal>("SocialWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialWF");

                    b.Property<decimal>("SocialWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialWS");

                    b.Property<decimal>("SocialWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialWT");

                    b.Property<double?>("StandaloneCapital")
                        .HasColumnType("float");

                    b.Property<double?>("StandaloneRoe")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROE");

                    b.Property<double?>("StandaloneRoequote")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROEQuote");

                    b.Property<double?>("StdvAdj")
                        .HasColumnType("float");

                    b.Property<double>("TotalExp")
                        .HasColumnType("float");

                    b.HasKey("LayerLossAnalysisId")
                        .HasName("PK_dbo.LayerLossAnalysis");

                    b.HasIndex("LayerId");

                    b.HasIndex(new[] { "AlphaGuAnalysisId" }, "IX_AlphaGuAnalysisId");

                    b.HasIndex(new[] { "GuAnalysisId" }, "IX_GuAnalysisId");

                    b.HasIndex(new[] { "LossAnalysisId" }, "IX_LossAnalysisId");

                    b.ToTable("LayerLossAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerLossEstScenario", b =>
                {
                    b.Property<int>("LayerLossEstScenarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerLossEstScenarioId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LayerLossEstScenarioId")
                        .HasName("PK_dbo.LayerLossEstScenario");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "LossEstScenarioId" }, "IX_LossEstScenarioId");

                    b.HasIndex(new[] { "LossEstScenarioId", "LayerId" }, "UQ_LayerLossEstScenario")
                        .IsUnique()
                        .HasFilter("([LayerId] IS NOT NULL AND [ISActive]=(1))");

                    b.ToTable("LayerLossEstScenario", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerMarketShareFactor", b =>
                {
                    b.Property<int>("LayerMarketShareFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerMarketShareFactorId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerLossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<double>("MarketShare")
                        .HasColumnType("float");

                    b.Property<int>("MarketShareFactorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LayerMarketShareFactorId")
                        .HasName("PK_dbo.LayerMarketShareFactor");

                    b.HasIndex(new[] { "LayerLossEstScenarioId" }, "IX_LayerLossEstScenarioId");

                    b.HasIndex(new[] { "MarketShareFactorId" }, "IX_MarketShareFactorId");

                    b.HasIndex(new[] { "MarketShareFactorId", "LayerLossEstScenarioId" }, "UQ_LayerMarketShareFactor")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("LayerMarketShareFactor", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerMarketShareLoss", b =>
                {
                    b.Property<int>("LayerMarketShareLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerMarketShareLossId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LayerLoss")
                        .HasColumnType("float");

                    b.Property<int>("LayerLossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<int>("MarketShareLossId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LayerMarketShareLossId")
                        .HasName("PK_dbo.LayerMarketShareLoss");

                    b.HasIndex(new[] { "LayerLossEstScenarioId" }, "IX_LayerLossEstScenarioId");

                    b.HasIndex(new[] { "MarketShareLossId" }, "IX_MarketShareLossId");

                    b.HasIndex(new[] { "MarketShareLossId", "LayerLossEstScenarioId" }, "UQ_LayerMarketShareLoss")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("LayerMarketShareLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerTopUpLossContract", b =>
                {
                    b.Property<int>("LayerTopUpLossContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerTopUpLossContractId"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TopUpZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ZoneLoss")
                        .HasColumnType("float");

                    b.Property<decimal>("ZoneLossPercent")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("LayerTopUpLossContractId")
                        .HasName("PK_dbo.LayerTopUpLossContract");

                    b.HasIndex(new[] { "ContractId" }, "IX_ContractId");

                    b.ToTable("LayerTopUpLossContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LegalTerm", b =>
                {
                    b.Property<int>("LegalTermsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LegalTermsId"));

                    b.Property<string>("AddnlComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("BrushFire")
                        .HasColumnType("bit");

                    b.Property<string>("BrushFireComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BrushFireHours")
                        .HasColumnType("int");

                    b.Property<string>("CommDiseaseComments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommDiseaseExcl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Commercial")
                        .HasColumnType("bit");

                    b.Property<int?>("CommutationTerm")
                        .HasColumnType("int");

                    b.Property<string>("ContractClauseSet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cyber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("CyberColltzd")
                        .HasColumnType("bit");

                    b.Property<string>("CyberComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EcoXplPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("EmailNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EmployerLiabilityLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Flood")
                        .HasColumnType("bit");

                    b.Property<string>("FloodComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FloodHours")
                        .HasColumnType("int");

                    b.Property<bool>("ForeignIncl")
                        .HasColumnType("bit");

                    b.Property<bool>("Freeze")
                        .HasColumnType("bit");

                    b.Property<string>("FreezeComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FreezeHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsAbsoluteExclusion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffirmativeTerrorism")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGovernmentalPoolBenefit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNcbrexcluded")
                        .HasColumnType("bit")
                        .HasColumnName("IsNCBRExcluded");

                    b.Property<bool>("IsOccupationDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupationDiseasePerEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupationDiseasePerEmployer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherInuringBenefitToReinsure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartialExclusion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilent")
                        .HasColumnType("bit");

                    b.Property<string>("LegalDataLinkNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LegalDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegalReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegalReviewerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Nbc")
                        .HasColumnType("bit")
                        .HasColumnName("NBC");

                    b.Property<int?>("OccupationDiseaseHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OsAsOf")
                        .HasColumnType("datetime2");

                    b.Property<string>("OsReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("OtherNat")
                        .HasColumnType("bit");

                    b.Property<string>("OtherNatComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OtherNatHours")
                        .HasColumnType("int");

                    b.Property<bool>("Personal")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Quake")
                        .HasColumnType("bit");

                    b.Property<string>("QuakeComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("QuakeHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewerComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<bool>("Riot")
                        .HasColumnType("bit");

                    b.Property<string>("RiotComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RiotHours")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SunsetTerm")
                        .HasColumnType("int");

                    b.Property<int?>("TareviewerId")
                        .HasColumnType("int")
                        .HasColumnName("TAReviewerId");

                    b.Property<bool>("TerrCert")
                        .HasColumnType("bit");

                    b.Property<string>("Territory")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TerrorComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UnderwriterDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnderwriterStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Wind")
                        .HasColumnType("bit");

                    b.Property<string>("WindComments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WindHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WordingReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WordingReturned")
                        .HasColumnType("datetime2");

                    b.Property<int>("WordingStatus")
                        .HasColumnType("int");

                    b.HasKey("LegalTermsId")
                        .HasName("PK_dbo.LegalTerms");

                    b.HasIndex(new[] { "LegalReviewerId" }, "IX_LegalReviewerId");

                    b.HasIndex(new[] { "ReviewerId" }, "IX_ReviewerId");

                    b.HasIndex(new[] { "TareviewerId" }, "IX_TAReviewerId");

                    b.ToTable("LegalTerms");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LegalTermClause", b =>
                {
                    b.Property<int>("LegalTermClauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LegalTermClauseId"));

                    b.Property<bool>("Applicable")
                        .HasColumnType("bit");

                    b.Property<string>("CommentsLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentsTa")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CommentsTA");

                    b.Property<int>("ContractClauseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LegalTermsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LegalTermClauseId")
                        .HasName("PK_dbo.LegalTermClause");

                    b.HasIndex("ContractClauseId");

                    b.HasIndex(new[] { "LegalTermsId", "ContractClauseId" }, "UQ_LegalTermClause")
                        .IsUnique()
                        .HasFilter("([IsDeleted]=(0) AND [IsActive]=(1))");

                    b.ToTable("LegalTermClause", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LloydsRiskCode", b =>
                {
                    b.Property<int>("LloydsRiskCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LloydsRiskCodeId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RiskCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("LloydsRiskCodeId")
                        .HasName("PK_dbo.LloydsRiskCode");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.ToTable("LloydsRiskCode", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossAnalysis", b =>
                {
                    b.Property<int>("LossAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossAnalysisId"));

                    b.Property<decimal>("CedentCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentCS");

                    b.Property<decimal>("CedentEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentEQ");

                    b.Property<decimal>("CedentFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentFL");

                    b.Property<decimal>("CedentWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentWF");

                    b.Property<decimal>("CedentWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentWS");

                    b.Property<decimal>("CedentWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("CedentWT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<decimal>("GrowthCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthCS");

                    b.Property<decimal>("GrowthEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthEQ");

                    b.Property<decimal>("GrowthFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthFL");

                    b.Property<decimal>("GrowthWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthWF");

                    b.Property<decimal>("GrowthWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthWS");

                    b.Property<decimal>("GrowthWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("GrowthWT");

                    b.Property<int?>("GuAnalysisId")
                        .HasColumnType("int");

                    b.Property<decimal>("Inflation")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalcIndustryMetrics")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("LaeCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeCS");

                    b.Property<decimal>("LaeEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeEQ");

                    b.Property<decimal>("LaeFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeFL");

                    b.Property<decimal>("LaeWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeWF");

                    b.Property<decimal>("LaeWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeWS");

                    b.Property<decimal>("LaeWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("LaeWT");

                    b.Property<Guid?>("LossAnalysisGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("PerilCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilCS");

                    b.Property<decimal>("PerilEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilEQ");

                    b.Property<decimal>("PerilFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilFL");

                    b.Property<decimal>("PerilWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilWF");

                    b.Property<decimal>("PerilWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilWS");

                    b.Property<decimal>("PerilWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PerilWT");

                    b.Property<string>("ReasonStale")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RunStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SimYears")
                        .HasColumnType("int");

                    b.Property<bool>("SkipAggFeatures")
                        .HasColumnType("bit");

                    b.Property<decimal>("SocialCs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialCS");

                    b.Property<decimal>("SocialEq")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialEQ");

                    b.Property<decimal>("SocialFl")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialFL");

                    b.Property<decimal>("SocialWf")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialWF");

                    b.Property<decimal>("SocialWs")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialWS");

                    b.Property<decimal>("SocialWt")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SocialWT");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LossAnalysisId")
                        .HasName("PK_dbo.LossAnalysis");

                    b.HasIndex("GuAnalysisId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.HasIndex(new[] { "Name", "SubmissionId", "Model" }, "UQ_LossAnalysis_Name")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1) AND [IsDeleted]=(0))");

                    b.HasIndex(new[] { "SubmissionId", "LossView" }, "UQ_LossView")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1) AND ([LossView] IN ((1), (2), (3))))");

                    b.ToTable("LossAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossEstScenario", b =>
                {
                    b.Property<int>("LossEstScenarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossEstScenarioId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Fxdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("FXDate");

                    b.Property<decimal>("IndLossFxRateUsd")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("IndLossFxRateUSD");

                    b.Property<int?>("IndustryLossFilterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossAdjustmentIndex")
                        .HasColumnType("int");

                    b.Property<int>("LossFreqMaxYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("LossEstScenarioId")
                        .HasName("PK_dbo.LossEstScenario");

                    b.HasIndex(new[] { "IndustryLossFilterId" }, "IX_IndustryLossFilterId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.ToTable("LossEstScenario", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossEvent", b =>
                {
                    b.Property<int>("LossEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossEventId"));

                    b.Property<int?>("AireventId")
                        .HasColumnType("int")
                        .HasColumnName("AIREventId");

                    b.Property<int?>("CedentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("EventYear")
                        .HasColumnType("int");

                    b.Property<string>("IndustryEventCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PcscatNum")
                        .HasColumnType("int")
                        .HasColumnName("PCSCatNum");

                    b.Property<string>("Peril")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RmseventId")
                        .HasColumnType("int")
                        .HasColumnName("RMSEventId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LossEventId")
                        .HasName("PK_dbo.LossEvent");

                    b.HasIndex(new[] { "CedentId" }, "IX_CedentId");

                    b.HasIndex(new[] { "EventCode" }, "UQ_LossEventCode")
                        .IsUnique();

                    b.ToTable("LossEvent", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossPool", b =>
                {
                    b.Property<int>("LossPoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossPoolId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LegalEntity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StateCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LossPoolId")
                        .HasName("PK_dbo.LossPool");

                    b.ToTable("LossPool", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossTrendFactor", b =>
                {
                    b.Property<int>("LossTrendFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossTrendFactorId"));

                    b.Property<double>("BaselineForPremiumIndex")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DevelopFactor")
                        .HasColumnType("float");

                    b.Property<double>("ExposureFactor")
                        .HasColumnType("float");

                    b.Property<decimal>("ExposureTrend")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("ExposureYear")
                        .HasColumnType("int");

                    b.Property<double>("FinalTrendFactor")
                        .HasColumnType("float");

                    b.Property<decimal>("HistPremFacultative")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistPremProportional")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistPremTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistPremXol")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistTivFacultative")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<double>("HistTivIndex")
                        .HasColumnType("float");

                    b.Property<decimal>("HistTivProportional")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistTivTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistTivXol")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("HistoricalPremium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("IncurredLdfs")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("OnLevelPremium")
                        .HasColumnType("float");

                    b.Property<double>("PremiumIndex")
                        .HasColumnType("float");

                    b.Property<decimal>("RateChange")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<double>("RateIndex")
                        .HasColumnType("float");

                    b.Property<double>("RateLevel")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("SeverityFactor")
                        .HasColumnType("float");

                    b.Property<decimal>("SeverityTrend")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("LossTrendFactorId")
                        .HasName("PK_dbo.LossTrendFactor");

                    b.HasIndex(new[] { "LossEstScenarioId" }, "IX_LossEstScenarioId");

                    b.HasIndex(new[] { "LossEstScenarioId", "ExposureYear" }, "UQ_LossTrendFactor")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("LossTrendFactor", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossViewResult", b =>
                {
                    b.Property<int>("LossViewResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossViewResultId"));

                    b.Property<double?>("CatPml")
                        .HasColumnType("float");

                    b.Property<double?>("CatPmlQuote")
                        .HasColumnType("float");

                    b.Property<double?>("Cr")
                        .HasColumnType("float")
                        .HasColumnName("CR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("El")
                        .HasColumnType("float")
                        .HasColumnName("EL");

                    b.Property<double?>("Elatt")
                        .HasColumnType("float")
                        .HasColumnName("ELAtt");

                    b.Property<double?>("EllargeLoss")
                        .HasColumnType("float")
                        .HasColumnName("ELLargeLoss");

                    b.Property<double?>("Elmodeled")
                        .HasColumnType("float")
                        .HasColumnName("ELModeled");

                    b.Property<double?>("ElnonModeled")
                        .HasColumnType("float")
                        .HasColumnName("ELNonModeled");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<double?>("Lr")
                        .HasColumnType("float")
                        .HasColumnName("LR");

                    b.Property<double?>("Lratt")
                        .HasColumnType("float")
                        .HasColumnName("LRAtt");

                    b.Property<double?>("LrlargeLoss")
                        .HasColumnType("float")
                        .HasColumnName("LRLargeLoss");

                    b.Property<double?>("Lrmodeled")
                        .HasColumnType("float")
                        .HasColumnName("LRModeled");

                    b.Property<double?>("LrnonModeled")
                        .HasColumnType("float")
                        .HasColumnName("LRNonModeled");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Ncbcomm")
                        .HasColumnType("float")
                        .HasColumnName("NCBComm");

                    b.Property<double?>("ProfitComm")
                        .HasColumnType("float");

                    b.Property<double?>("Ptm")
                        .HasColumnType("float")
                        .HasColumnName("PTM");

                    b.Property<double?>("Ptmquote")
                        .HasColumnType("float")
                        .HasColumnName("PTMQuote");

                    b.Property<double?>("Rb")
                        .HasColumnType("float")
                        .HasColumnName("RB");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("Rp")
                        .HasColumnType("float")
                        .HasColumnName("RP");

                    b.Property<double?>("Sscomm")
                        .HasColumnType("float")
                        .HasColumnName("SSComm");

                    b.Property<double?>("StandaloneCapital")
                        .HasColumnType("float");

                    b.Property<double?>("StandaloneRoe")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROE");

                    b.Property<double?>("StandaloneRoecorreAuth")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROECorreAuth");

                    b.Property<double?>("StandaloneRoecorreQuote")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROECorreQuote");

                    b.Property<double?>("StandaloneRoequote")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROEQuote");

                    b.Property<double?>("StdvAdj")
                        .HasColumnType("float");

                    b.Property<double?>("TotalExp")
                        .HasColumnType("float");

                    b.HasKey("LossViewResultId")
                        .HasName("PK_dbo.LossViewResult");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "LayerId", "LossView" }, "UQ_LossView")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("LossViewResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossViewResultContract", b =>
                {
                    b.Property<int>("LossViewResultContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossViewResultContractId"));

                    b.Property<double?>("CatPml")
                        .HasColumnType("float");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<double?>("Cr")
                        .HasColumnType("float")
                        .HasColumnName("CR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("El")
                        .HasColumnType("float")
                        .HasColumnName("EL");

                    b.Property<double?>("Elamount")
                        .HasColumnType("float")
                        .HasColumnName("ELAmount");

                    b.Property<double?>("Elatt")
                        .HasColumnType("float")
                        .HasColumnName("ELAtt");

                    b.Property<double?>("EllargeLoss")
                        .HasColumnType("float")
                        .HasColumnName("ELLargeLoss");

                    b.Property<double?>("Elmodeled")
                        .HasColumnType("float")
                        .HasColumnName("ELModeled");

                    b.Property<double?>("ElnonModeled")
                        .HasColumnType("float")
                        .HasColumnName("ELNonModeled");

                    b.Property<double?>("Er")
                        .HasColumnType("float")
                        .HasColumnName("ER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LossView")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("Lr")
                        .HasColumnType("float")
                        .HasColumnName("LR");

                    b.Property<double?>("Lratt")
                        .HasColumnType("float")
                        .HasColumnName("LRAtt");

                    b.Property<double?>("LrlargeLoss")
                        .HasColumnType("float")
                        .HasColumnName("LRLargeLoss");

                    b.Property<double?>("Lrmodeled")
                        .HasColumnType("float")
                        .HasColumnName("LRModeled");

                    b.Property<double?>("LrnonModeled")
                        .HasColumnType("float")
                        .HasColumnName("LRNonModeled");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Ncbcomm")
                        .HasColumnType("float")
                        .HasColumnName("NCBComm");

                    b.Property<double?>("ProfitComm")
                        .HasColumnType("float");

                    b.Property<double?>("Ptm")
                        .HasColumnType("float")
                        .HasColumnName("PTM");

                    b.Property<double?>("Rb")
                        .HasColumnType("float")
                        .HasColumnName("RB");

                    b.Property<double?>("ReinstPremAmount")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("Rp")
                        .HasColumnType("float")
                        .HasColumnName("RP");

                    b.Property<double?>("Sscomm")
                        .HasColumnType("float")
                        .HasColumnName("SSComm");

                    b.Property<double?>("StandaloneCapital")
                        .HasColumnType("float");

                    b.Property<double?>("StandaloneRoe")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROE");

                    b.Property<double?>("StandaloneRoecorre")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROECorre");

                    b.Property<double?>("StdvAdj")
                        .HasColumnType("float");

                    b.Property<double?>("TotalExp")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPremium")
                        .HasColumnType("float");

                    b.HasKey("LossViewResultContractId")
                        .HasName("PK_dbo.LossViewResultContract");

                    b.HasIndex(new[] { "ContractId" }, "IX_ContractId");

                    b.ToTable("LossViewResultContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossZone", b =>
                {
                    b.Property<int>("LossZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LossZoneId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LossZoneId")
                        .HasName("PK_dbo.LossZone");

                    b.HasIndex(new[] { "Name" }, "UQ_LossZoneName")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LossZone", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MajorZone", b =>
                {
                    b.Property<int>("MajorZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorZoneId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("StdvFactor")
                        .HasColumnType("float");

                    b.HasKey("MajorZoneId")
                        .HasName("PK_dbo.MajorZone");

                    b.HasIndex(new[] { "Name" }, "UQ_MajorZoneName")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("MajorZone", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MarketShareFactor", b =>
                {
                    b.Property<int>("MarketShareFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketShareFactorId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IndustryLossSubRegionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Peril")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MarketShareFactorId")
                        .HasName("PK_dbo.MarketShareFactor");

                    b.HasIndex(new[] { "IndustryLossSubRegionId" }, "IX_IndustryLossSubRegionId");

                    b.HasIndex(new[] { "LossEstScenarioId" }, "IX_LossEstScenarioId");

                    b.HasIndex(new[] { "LossEstScenarioId", "IndustryLossSubRegionId", "Peril" }, "UQ_MarketShareFactor")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("MarketShareFactor", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MarketShareLoss", b =>
                {
                    b.Property<int>("MarketShareLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketShareLossId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IndustryLossId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IndustryOnLevelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("IndustryOnLevelLoss")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossEstScenarioId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketShareFactorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MarketShareLossId")
                        .HasName("PK_dbo.MarketShareLoss");

                    b.HasIndex(new[] { "IndustryLossId" }, "IX_IndustryLossId");

                    b.HasIndex(new[] { "LossEstScenarioId" }, "IX_LossEstScenarioId");

                    b.HasIndex(new[] { "MarketShareFactorId" }, "IX_MarketShareFactorId");

                    b.HasIndex(new[] { "LossEstScenarioId", "IndustryLossId" }, "UQ_MarketShareLoss")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("MarketShareLoss", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ModelAnalysis", b =>
                {
                    b.Property<int>("ModelAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelAnalysisId"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<decimal>("CedentShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("CurveType")
                        .HasColumnType("int");

                    b.Property<string>("Database")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExcludedGeographies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExcludedLobs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExcludedPerils")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<decimal>("Fxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FXRate");

                    b.Property<int?>("GeographyId")
                        .HasColumnType("int");

                    b.Property<int>("GuAnalysisId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("LossType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Peril")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Perspective")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Platform")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("RollUp")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Server")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TreatyId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("YeltGeoRowCount")
                        .HasColumnType("int");

                    b.Property<int>("YeltRowCount")
                        .HasColumnType("int");

                    b.Property<string>("Zones")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ModelAnalysisId")
                        .HasName("PK_dbo.ModelAnalysis");

                    b.HasIndex(new[] { "GuAnalysisId" }, "IX_GuAnalysisId");

                    b.ToTable("ModelAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MultiyearShare", b =>
                {
                    b.Property<int>("MultiyearShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MultiyearShareId"));

                    b.Property<decimal>("AuthShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("BindYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("EstimatedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("Inception")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Placement")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("QuotedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SignedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("Uwyear")
                        .HasColumnType("int")
                        .HasColumnName("UWYear");

                    b.HasKey("MultiyearShareId")
                        .HasName("PK_dbo.MultiyearShare");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.ToTable("MultiyearShare", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.NotificationEvent", b =>
                {
                    b.Property<int>("NotificationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationEventId"));

                    b.Property<string>("AlertRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventLevel")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("NotificationEventId")
                        .HasName("PK_dbo.NotificationEvent");

                    b.ToTable("NotificationEvent", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("OfficeId")
                        .HasName("PK_dbo.Office");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId");

                    b.HasIndex(new[] { "Name" }, "IX_Name")
                        .IsUnique();

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PermissionId")
                        .HasName("PK_dbo.Permission");

                    b.HasIndex(new[] { "Name" }, "UQ_Permission_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PmlMatchingDef", b =>
                {
                    b.Property<int>("PmlMatchingDefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PmlMatchingDefId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MatchingType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SourceGuAnalysisId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceIndustryAnalysisId")
                        .HasColumnType("int");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int>("TargetGuAnalysisId")
                        .HasColumnType("int");

                    b.HasKey("PmlMatchingDefId")
                        .HasName("PK_dbo.PmlMatchingDef");

                    b.HasIndex(new[] { "SourceGuAnalysisId" }, "IX_SourceGuAnalysisId");

                    b.HasIndex(new[] { "SourceIndustryAnalysisId" }, "IX_SourceIndustryAnalysisId");

                    b.HasIndex(new[] { "TargetGuAnalysisId" }, "IX_TargetGuAnalysisId");

                    b.ToTable("PmlMatchingDef", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyTracker", b =>
                {
                    b.Property<int>("PolicyTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyTrackerId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisContractId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisMkey")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegisMKey");

                    b.Property<string>("RegisNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisPgmNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RowEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PolicyTrackerId")
                        .HasName("PK_dbo.PolicyTracker");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.ToTable("PolicyTracker", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyTrackerDetail", b =>
                {
                    b.Property<int>("PolicyTrackerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyTrackerDetailId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ChildKey")
                        .HasColumnType("int");

                    b.Property<int>("ChildKeyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FieldValueNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PolicyTrackerDetailStatus")
                        .HasColumnType("int");

                    b.Property<int>("PolicyTrackerId")
                        .HasColumnType("int");

                    b.Property<string>("RevoFieldName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PolicyTrackerDetailId")
                        .HasName("PK_dbo.PolicyTrackerDetail");

                    b.HasIndex(new[] { "PolicyTrackerId" }, "IX_PolicyTrackerId");

                    b.ToTable("PolicyTrackerDetail", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyTrackerLog", b =>
                {
                    b.Property<int>("PolicyTrackerLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyTrackerLogId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisContractId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisMkey")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegisMKey");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedFields")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicyTrackerLogId")
                        .HasName("PK_dbo.PolicyTrackerLog");

                    b.ToTable("PolicyTrackerLog", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyUpdate", b =>
                {
                    b.Property<int>("PolicyUpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyUpdateId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PolicyTrackerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("PolicyUpdateId")
                        .HasName("PK_dbo.PolicyUpdate");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "PolicyTrackerId" }, "IX_PolicyTrackerId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.ToTable("PolicyUpdate", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyUpdateDetail", b =>
                {
                    b.Property<int>("PolicyUpdateDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyUpdateDetailId"));

                    b.Property<int?>("ChildKey")
                        .HasColumnType("int");

                    b.Property<int>("ChildKeyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PolicyUpdateId")
                        .HasColumnType("int");

                    b.Property<string>("PreviousValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevisedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevoFieldName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PolicyUpdateDetailId")
                        .HasName("PK_dbo.PolicyUpdateDetail");

                    b.HasIndex(new[] { "PolicyUpdateId" }, "IX_PolicyUpdateId");

                    b.ToTable("PolicyUpdateDetail", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PoolGuAnalysis", b =>
                {
                    b.Property<int>("PoolGuAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoolGuAnalysisId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossPoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Peril")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("PoolGuAnalysisId")
                        .HasName("PK_dbo.PoolGuAnalysis");

                    b.HasIndex(new[] { "LossPoolId" }, "IX_LossPoolId");

                    b.ToTable("PoolGuAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortAdj", b =>
                {
                    b.Property<int>("PortAdjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortAdjId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilterString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("PortAdjId")
                        .HasName("PK_dbo.PortAdj");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.ToTable("PortAdj", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortAdjAction", b =>
                {
                    b.Property<int>("PortAdjActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortAdjActionId"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortAdjId")
                        .HasColumnType("int");

                    b.Property<string>("Prop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StringParam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PortAdjActionId")
                        .HasName("PK_dbo.PortAdjAction");

                    b.HasIndex(new[] { "PortAdjId" }, "IX_PortAdjId");

                    b.ToTable("PortAdjAction", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayer", b =>
                {
                    b.Property<int>("PortLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManualAdjustment")
                        .HasColumnType("bit");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PortLayerProjectedCessionPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Premium2Adjusted")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PremiumAdjusted")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PxMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonStale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<decimal>("Rol2adjusted")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL2Adjusted");

                    b.Property<decimal>("Roladjusted")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROLAdjusted");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("RunEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RunStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Share")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Share2Adjusted")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("ShareAdjusted")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("PortLayerId")
                        .HasName("PK_dbo.PortLayer");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "PortLayerProjectedCessionPeriodId" }, "IX_PortLayerProjectedCessionPeriodId");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.ToTable("PortLayer", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerCession", b =>
                {
                    b.Property<int>("PortLayerCessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerCessionId"));

                    b.Property<string>("CalculationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CessionFeesRaw")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionGross")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionNet")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionNetAdjusted")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("ShouldCessionApply")
                        .HasColumnType("bit");

                    b.HasKey("PortLayerCessionId")
                        .HasName("PK_dbo.PortLayerCession");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.HasIndex(new[] { "RetroProgramId" }, "IX_RetroProgramId");

                    b.ToTable("PortLayerCession", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerCessionDuration", b =>
                {
                    b.Property<int>("PortLayerCessionDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerCessionDurationId"));

                    b.Property<double>("CessionNet")
                        .HasColumnType("float");

                    b.Property<int>("DayEnd")
                        .HasColumnType("int");

                    b.Property<int>("DayStart")
                        .HasColumnType("int");

                    b.Property<double>("EarnPatternWeightPct")
                        .HasColumnType("float");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.HasKey("PortLayerCessionDurationId")
                        .HasName("PK_dbo.PortLayerCessionDuration");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.HasIndex(new[] { "RetroProgramId" }, "IX_RetroProgramId");

                    b.ToTable("PortLayerCessionDuration", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerEarnPattern", b =>
                {
                    b.Property<int>("PortLayerEarnPatternId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerEarnPatternId"));

                    b.Property<short>("Day")
                        .HasColumnType("smallint");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<double>("OccLoss")
                        .HasColumnType("float");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.HasKey("PortLayerEarnPatternId")
                        .HasName("PK_dbo.PortLayerEarnPattern");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.ToTable("PortLayerEarnPattern", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerFieldSelectionPerTypeResult", b =>
                {
                    b.Property<int>("PortLayerFieldSelectionPerTypeResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerFieldSelectionPerTypeResultId"));

                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.Property<int>("Inforce")
                        .HasColumnType("int");

                    b.Property<int>("Next12")
                        .HasColumnType("int");

                    b.Property<int>("NextYear")
                        .HasColumnType("int");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.HasKey("PortLayerFieldSelectionPerTypeResultId")
                        .HasName("PK_dbo.PortLayerFieldSelectionPerTypeResult");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.ToTable("PortLayerFieldSelectionPerTypeResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerLossDuration", b =>
                {
                    b.Property<int>("PortLayerLossDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerLossDurationId"));

                    b.Property<int>("DayEnd")
                        .HasColumnType("int");

                    b.Property<int>("DayStart")
                        .HasColumnType("int");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PortLayerLossDurationId")
                        .HasName("PK_dbo.PortLayerLossDuration");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.ToTable("PortLayerLossDuration", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerPriceResult", b =>
                {
                    b.Property<int>("PortLayerPriceResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerPriceResultId"));

                    b.Property<double?>("EarnPatternPctInforce")
                        .HasColumnType("float");

                    b.Property<double?>("EarnPatternPctProjected")
                        .HasColumnType("float");

                    b.Property<double?>("EarnPatternPctProjected2")
                        .HasColumnType("float");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.HasKey("PortLayerPriceResultId")
                        .HasName("PK_dbo.PortLayerPriceResult");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.ToTable("PortLayerPriceResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerProjectedCessionPeriod", b =>
                {
                    b.Property<int>("PortLayerProjectedCessionPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortLayerProjectedCessionPeriodId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Projected1Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Projected1OrigInception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Projected2Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Projected2OrigInception")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PortLayerProjectedCessionPeriodId")
                        .HasName("PK_dbo.PortLayerProjectedCessionPeriod");

                    b.ToTable("PortLayerProjectedCessionPeriod", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortMetric", b =>
                {
                    b.Property<int>("PortMetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortMetricId"));

                    b.Property<double>("AggLimit")
                        .HasColumnType("float");

                    b.Property<double>("AveRolOnFirstLimit")
                        .HasColumnType("float");

                    b.Property<double>("CollateralPctOfAggLimit")
                        .HasColumnType("float");

                    b.Property<double>("Cr")
                        .HasColumnType("float")
                        .HasColumnName("CR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DepositPremium")
                        .HasColumnType("float");

                    b.Property<double>("El")
                        .HasColumnType("float")
                        .HasColumnName("EL");

                    b.Property<double>("Elamount")
                        .HasColumnType("float")
                        .HasColumnName("ELAmount");

                    b.Property<double>("ElattritionalAmount")
                        .HasColumnType("float")
                        .HasColumnName("ELAttritionalAmount");

                    b.Property<double>("EllargeLossAmount")
                        .HasColumnType("float")
                        .HasColumnName("ELLargeLossAmount");

                    b.Property<double>("ElmodeledAmount")
                        .HasColumnType("float")
                        .HasColumnName("ELModeledAmount");

                    b.Property<double>("Elmultiple")
                        .HasColumnType("float")
                        .HasColumnName("ELMultiple");

                    b.Property<double>("ElnonModeledAmount")
                        .HasColumnType("float")
                        .HasColumnName("ELNonModeledAmount");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<double>("Er")
                        .HasColumnType("float")
                        .HasColumnName("ER");

                    b.Property<double>("ExpectedGrossPremium")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedProfit")
                        .HasColumnType("float");

                    b.Property<double>("ExpensesAmount")
                        .HasColumnType("float");

                    b.Property<double>("FirstLimit")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Leverage")
                        .HasColumnType("float");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<double>("Lr")
                        .HasColumnType("float")
                        .HasColumnName("LR");

                    b.Property<DateTime>("MaxInception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MinInception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("NcbcommAmount")
                        .HasColumnType("float")
                        .HasColumnName("NCBCommAmount");

                    b.Property<double>("NetPremiumToExpenses")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfLayersWithShare")
                        .HasColumnType("int");

                    b.Property<int>("PortMetricType")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<double>("PremiumFactor")
                        .HasColumnType("float");

                    b.Property<double>("ProfitCommAmount")
                        .HasColumnType("float");

                    b.Property<double>("Rbamount")
                        .HasColumnType("float")
                        .HasColumnName("RBAmount");

                    b.Property<string>("ReasonStale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReinstPremium")
                        .HasColumnType("float");

                    b.Property<double>("RequiredCollateral")
                        .HasColumnType("float");

                    b.Property<double>("ReserveFactor")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Rpamount")
                        .HasColumnType("float")
                        .HasColumnName("RPAmount");

                    b.Property<double>("SscommAmount")
                        .HasColumnType("float")
                        .HasColumnName("SSCommAmount");

                    b.Property<double>("StandaloneCapital")
                        .HasColumnType("float");

                    b.Property<double>("StandalonePml")
                        .HasColumnType("float")
                        .HasColumnName("StandalonePML");

                    b.Property<double>("StandaloneRoe")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROE");

                    b.HasKey("PortMetricId")
                        .HasName("PK_dbo.PortMetric");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.ToTable("PortMetric", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortPeriodResult", b =>
                {
                    b.Property<int>("PortPeriodResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortPeriodResultId"));

                    b.Property<DateTime>("CurrentYearExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentYearInception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InforceExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InforceInception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Next12Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Next12Inception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextYearExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextYearInception")
                        .HasColumnType("datetime2");

                    b.Property<int>("PortLayerId")
                        .HasColumnType("int");

                    b.HasKey("PortPeriodResultId")
                        .HasName("PK_dbo.PortPeriodResult");

                    b.HasIndex(new[] { "PortLayerId" }, "IX_PortLayerId");

                    b.ToTable("PortPeriodResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortProjectedRetro", b =>
                {
                    b.Property<int>("PortProjectedRetroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortProjectedRetroId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PortProjectedRetroId")
                        .HasName("PK_dbo.PortProjectedRetro");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.HasIndex(new[] { "RetroProgramId" }, "IX_RetroProgramId");

                    b.ToTable("PortProjectedRetro", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortRoeResult", b =>
                {
                    b.Property<int>("PortRoeResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortRoeResultId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("GrossCapitalTvar")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVar");

                    b.Property<double?>("GrossCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlTvarArl")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArl");

                    b.Property<double?>("GrossCatPmlVarArl")
                        .HasColumnType("float");

                    b.Property<double?>("GrossRoetvar")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVar");

                    b.Property<double?>("GrossRoevar")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("NetCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArl")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturn")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFees")
                        .HasColumnType("float");

                    b.Property<double?>("NetRoevar")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVar");

                    b.Property<double?>("NetRoevarWithFees")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFees");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("TargetRoe")
                        .HasColumnType("float");

                    b.HasKey("PortRoeResultId")
                        .HasName("PK_dbo.PortRoeResult");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.ToTable("PortRoeResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortfolioId"));

                    b.Property<DateTime>("AsOfDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("Attachment")
                        .HasColumnType("int");

                    b.Property<DateTime>("CessionAsOfDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("");

                    b.Property<int>("EarningType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FilterString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<double>("GrossCapital")
                        .HasColumnType("float");

                    b.Property<double>("GrossRoe")
                        .HasColumnType("float")
                        .HasColumnName("GrossROE");

                    b.Property<bool>("HasRetroSelection")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Inception")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerboseLoggingEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPricedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastPricedUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioType")
                        .HasColumnType("int");

                    b.Property<string>("RetroProgramIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("RunEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RunStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShouldStorePortMetricYlt")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldStorePortfolioYelt")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldStorePortfolioYlt")
                        .HasColumnType("bit");

                    b.Property<bool>("UseCessionGross")
                        .HasColumnType("bit");

                    b.Property<bool>("UseRevised")
                        .HasColumnType("bit");

                    b.Property<int>("Uwyear")
                        .HasColumnType("int")
                        .HasColumnName("UWYear");

                    b.HasKey("PortfolioId")
                        .HasName("PK_dbo.Portfolio");

                    b.ToTable("Portfolio", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortfolioFx", b =>
                {
                    b.Property<int>("PortfolioFxid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortfolioFXId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortfolioFxid"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<decimal>("Fxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FXRate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PortfolioFxid")
                        .HasName("PK_dbo.PortfolioFX");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.ToTable("PortfolioFX", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumBase", b =>
                {
                    b.Property<int>("PremiumBaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Adjustment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CommAcctPrem")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DepositAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DepositPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("EqAct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EqActExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EqEst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EqEstExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EstUltPremium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Flat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsAccruals")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAsCollected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEqualInstallments")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremiumPort")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwingRated")
                        .HasColumnType("bit");

                    b.Property<decimal>("MdAct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MdActExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MdEst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MdEstExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NcbPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NumberOfInstallments")
                        .HasColumnType("int");

                    b.Property<int>("PremiumMethod")
                        .HasColumnType("int");

                    b.Property<decimal>("QuoteCommAcctPrem")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ReportingDays")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SettlementDays")
                        .HasColumnType("int");

                    b.Property<decimal>("Siact")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIAct");

                    b.Property<decimal>("SiactExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIActExp");

                    b.Property<decimal>("Siest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIEst");

                    b.Property<decimal>("SiestExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIEstExp");

                    b.Property<decimal>("Spiact")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIAct");

                    b.Property<decimal>("SpiactExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIActExp");

                    b.Property<decimal>("Spiest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIEst");

                    b.Property<decimal>("SpiestExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIEstExp");

                    b.Property<decimal?>("SwingRateLossMultiplier")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("SwingRateMaxPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("SwingRateMinPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("WdAct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WdActExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WdEst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WdEstExp")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PremiumBaseId")
                        .HasName("PK_dbo.PremiumBase");

                    b.HasIndex(new[] { "PremiumBaseId" }, "IX_PremiumBaseId");

                    b.ToTable("PremiumBase", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumBaseContract", b =>
                {
                    b.Property<int>("PremiumBaseContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("Adjustment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DepositAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DepositPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("EqAct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EqActExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EqEst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EqEstExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EstUltPremium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Flat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsAccruals")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAsCollected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEqualInstallments")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremiumPort")
                        .HasColumnType("bit");

                    b.Property<decimal>("MdAct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MdActExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MdEst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MdEstExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NcbPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NumberOfInstallments")
                        .HasColumnType("int");

                    b.Property<string>("PremiumMethod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReportingDays")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SettlementDays")
                        .HasColumnType("int");

                    b.Property<decimal>("Siact")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIAct");

                    b.Property<decimal>("SiactExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIActExp");

                    b.Property<decimal>("Siest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIEst");

                    b.Property<decimal>("SiestExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SIEstExp");

                    b.Property<decimal>("Spiact")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIAct");

                    b.Property<decimal>("SpiactExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIActExp");

                    b.Property<decimal>("Spiest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIEst");

                    b.Property<decimal>("SpiestExp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SPIEstExp");

                    b.Property<decimal>("WdAct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WdActExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WdEst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WdEstExp")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PremiumBaseContractId")
                        .HasName("PK_dbo.PremiumBaseContract");

                    b.HasIndex(new[] { "PremiumBaseContractId" }, "IX_PremiumBaseContractId");

                    b.ToTable("PremiumBaseContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumInstallment", b =>
                {
                    b.Property<int>("PremiumInstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiumInstallmentId"));

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InstallmentAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InstallmentPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Ncb")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Override")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PremiumBaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PremiumInstallmentId")
                        .HasName("PK_dbo.PremiumInstallment");

                    b.HasIndex(new[] { "PremiumBaseId" }, "IX_PremiumBaseId");

                    b.ToTable("PremiumInstallment", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumInstallmentContract", b =>
                {
                    b.Property<int>("PremiumInstallmentContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiumInstallmentContractId"));

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InstallmentAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InstallmentPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Ncb")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Override")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PremiumBaseContractId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PremiumInstallmentContractId")
                        .HasName("PK_dbo.PremiumInstallmentContract");

                    b.HasIndex(new[] { "PremiumBaseContractId" }, "IX_PremiumBaseContractId");

                    b.ToTable("PremiumInstallmentContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumSurplusRatio", b =>
                {
                    b.Property<int>("PremiumSurplusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiumSurplusId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SurplusRatio")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PremiumSurplusId")
                        .HasName("PK_dbo.PremiumSurplusRatio");

                    b.ToTable("PremiumSurplusRatio", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PresetLdp", b =>
                {
                    b.Property<int>("PresetLdpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PresetLDPId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PresetLdpid"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("PresetLdpid")
                        .HasName("PK_dbo.PresetLDP");

                    b.ToTable("PresetLDP", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PresetLdpdist", b =>
                {
                    b.Property<int>("PresetLdpdistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PresetLDPDistId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PresetLdpdistId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidLossPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("PresetLdpid")
                        .HasColumnType("int")
                        .HasColumnName("PresetLDPId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PresetLdpdistId")
                        .HasName("PK_dbo.PresetLDPDist");

                    b.HasIndex(new[] { "PresetLdpid" }, "IX_PresetLDPId");

                    b.ToTable("PresetLDPDist", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ProgramRoeResult", b =>
                {
                    b.Property<int>("ProgramRoeResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramRoeResultId"));

                    b.Property<double?>("CatPml")
                        .HasColumnType("float");

                    b.Property<double?>("CatPmlAuth")
                        .HasColumnType("float");

                    b.Property<double?>("CatPmlQuote")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("StandaloneCapital")
                        .HasColumnType("float");

                    b.Property<double?>("StandaloneCapitalAuth")
                        .HasColumnType("float");

                    b.Property<double?>("StandaloneCapitalQuote")
                        .HasColumnType("float");

                    b.Property<double?>("StandaloneRoe")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROE");

                    b.Property<double?>("StandaloneRoeauth")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROEAuth");

                    b.Property<double?>("StandaloneRoequote")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROEQuote");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("ProgramRoeResultId")
                        .HasName("PK_dbo.ProgramRoeResult");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.ToTable("ProgramRoeResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Programme", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<int>("CedentId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContractTypeDefault")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("ExtName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacilityDefault")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InsType")
                        .HasColumnType("int");

                    b.Property<string>("Insured")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFac")
                        .HasColumnType("bit");

                    b.Property<int>("LimitBasisDefault")
                        .HasColumnType("int");

                    b.Property<string>("Lobdefault")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LOBDefault");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Occupancy")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<bool>("QsofXs")
                        .HasColumnType("bit")
                        .HasColumnName("QSofXS");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReinsurerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SegmentDefault")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProgramId")
                        .HasName("PK_dbo.Program");

                    b.HasIndex(new[] { "CedentId" }, "IX_CedentId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId");

                    b.HasIndex(new[] { "DeptId" }, "IX_DeptId");

                    b.HasIndex(new[] { "OfficeId" }, "IX_OfficeId");

                    b.HasIndex(new[] { "ReinsurerId" }, "IX_ReinsurerId");

                    b.HasIndex(new[] { "RegisId" }, "UQ_RegisIdProgram")
                        .IsUnique()
                        .HasFilter("([RegisId] IS NOT NULL AND [RegisId]<>'' AND [IsDeleted]=(0) AND [IsActive]=(1))");

                    b.ToTable("Program", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PxSection", b =>
                {
                    b.Property<int>("PxSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PxSectionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PxLayerId")
                        .HasColumnType("int");

                    b.Property<int>("RollupOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Yltrollup")
                        .HasColumnType("int")
                        .HasColumnName("YLTRollup");

                    b.HasKey("PxSectionId")
                        .HasName("PK_dbo.PxSection");

                    b.HasIndex("PxLayerId");

                    b.HasIndex(new[] { "LayerId", "PxLayerId" }, "UQ_PxSection")
                        .IsUnique();

                    b.ToTable("PxSection", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PxSectionContract", b =>
                {
                    b.Property<int>("PxSectionContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PxSectionContractId"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("LayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PxLayerId")
                        .HasColumnType("int");

                    b.Property<string>("PxLayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RollupOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Yltrollup")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("YLTRollup");

                    b.HasKey("PxSectionContractId")
                        .HasName("PK_dbo.PxSectionContract");

                    b.HasIndex(new[] { "ContractId" }, "IX_ContractId");

                    b.ToTable("PxSectionContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Rcsspoint", b =>
                {
                    b.Property<int>("RcsspointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RCSSPointId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RcsspointId"));

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LossRatioFrom")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossRatioTo")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroCommissionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RcsspointId")
                        .HasName("PK_dbo.RCSSPoint");

                    b.HasIndex(new[] { "RetroCommissionId" }, "IX_RetroCommissionId");

                    b.ToTable("RCSSPoint", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Reinstatement", b =>
                {
                    b.Property<int>("ReinstatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReinstatementId"));

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProRata")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ReinstatementId")
                        .HasName("PK_dbo.Reinstatement");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.ToTable("Reinstatement", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ReinstatementContract", b =>
                {
                    b.Property<int>("ReinstatementContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReinstatementContractId"));

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ReinstatementContractId")
                        .HasName("PK_dbo.ReinstatementContract");

                    b.HasIndex(new[] { "ContractId" }, "IX_ContractId");

                    b.ToTable("ReinstatementContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroAllocation", b =>
                {
                    b.Property<int>("RetroAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroAllocationId"));

                    b.Property<int>("AllocationStatus")
                        .HasColumnType("int");

                    b.Property<decimal?>("Brokerage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("BrokerageSent")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionCapFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("CessionCapFactorSent")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionDemand")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionGross")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("CessionGrossFinalSent")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionNet")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("CessionNetFinalSent")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("CessionPlaced")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("El")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("EL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPortInExpiredLayer")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ManagementFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Override")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("OverrideSent")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("RegisMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RegisStatus")
                        .HasColumnType("int");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal?>("TailFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("Taxes")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("TaxesSent")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int?>("TopUpZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("RetroAllocationId")
                        .HasName("PK_dbo.RetroAllocation");

                    b.HasIndex("LayerId");

                    b.HasIndex(new[] { "RetroInvestorId", "LayerId" }, "UQ_RetroInvestorId_LayerId")
                        .IsUnique();

                    b.ToTable("RetroAllocation", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroBufferByEvent", b =>
                {
                    b.Property<int>("RetroBufferByEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroBufferByEventId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DayEnd")
                        .HasColumnType("int");

                    b.Property<int>("DayStart")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("MultiplierPct")
                        .HasColumnType("float");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("RetroBufferByEventId")
                        .HasName("PK_dbo.RetroBufferByEvent");

                    b.HasIndex(new[] { "RetroInvestorId" }, "IX_RetroInvestorId");

                    b.ToTable("RetroBufferByEvent", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroBufferByTime", b =>
                {
                    b.Property<int>("RetroBufferByTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroBufferByTimeId"));

                    b.Property<double>("BufferPct")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RetroBufferByTimeId")
                        .HasName("PK_dbo.RetroBufferByTime");

                    b.HasIndex(new[] { "RetroInvestorId" }, "IX_RetroInvestorId");

                    b.ToTable("RetroBufferByTime", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroCommission", b =>
                {
                    b.Property<int>("RetroCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroCommissionId"));

                    b.Property<int?>("BrokerContactId")
                        .HasColumnType("int");

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("BrokerageBasis")
                        .HasColumnType("int");

                    b.Property<int>("Ccfyears")
                        .HasColumnType("int")
                        .HasColumnName("CCFYears");

                    b.Property<int>("CommissionBasis")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Dcfamount")
                        .HasColumnType("int")
                        .HasColumnName("DCFAmount");

                    b.Property<int>("Dcfyears")
                        .HasColumnType("int")
                        .HasColumnName("DCFYears");

                    b.Property<decimal>("HighWaterMark")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("HurdleType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHighWaterMark")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoClaimBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfitComm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlidingScale")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Other")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("OverridePremBasisType")
                        .HasColumnType("int");

                    b.Property<decimal>("Pcshare")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PCShare");

                    b.Property<decimal>("Pcshare2")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("PCShare2");

                    b.Property<DateTime?>("PcstartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PCStartDate");

                    b.Property<decimal>("ProfitComm2")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int?>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rhoe2")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("RHOE2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SscommMax")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommMax");

                    b.Property<decimal>("SscommMin")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommMin");

                    b.Property<decimal>("SscommProv")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSCommProv");

                    b.Property<decimal>("SslossRatioMax")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioMax");

                    b.Property<decimal>("SslossRatioMin")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("SSLossRatioMin");

                    b.Property<decimal>("TailFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("TailFeeBasis")
                        .HasColumnType("int");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("RetroCommissionId")
                        .HasName("PK_dbo.RetroCommission");

                    b.HasIndex(new[] { "BrokerContactId" }, "IX_BrokerContactId");

                    b.HasIndex(new[] { "BrokerId" }, "IX_BrokerId");

                    b.HasIndex(new[] { "RetroProgramId", "Name" }, "UQ_RetroCommissionName")
                        .IsUnique()
                        .HasFilter("([RetroProgramId] IS NOT NULL AND [IsActive]=(1) AND [IsDeleted]=(0))");

                    b.ToTable("RetroCommission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroDoc", b =>
                {
                    b.Property<int>("RetroDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroDocId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DbfileId")
                        .HasColumnType("int")
                        .HasColumnName("DBFileId");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RetroDocId")
                        .HasName("PK_dbo.RetroDoc");

                    b.HasIndex(new[] { "DbfileId" }, "IX_DBFileId");

                    b.HasIndex(new[] { "RetroProgramId" }, "IX_RetroProgramId");

                    b.ToTable("RetroDoc", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroFacilityOverride", b =>
                {
                    b.Property<int>("RetroFacilityOverrideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroFacilityOverrideId"));

                    b.Property<decimal>("Cession")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RetroFacilityOverrideId")
                        .HasName("PK_dbo.RetroFacilityOverride");

                    b.HasIndex(new[] { "RetroInvestorId" }, "IX_RetroInvestorId");

                    b.ToTable("RetroFacilityOverride", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestor", b =>
                {
                    b.Property<int>("RetroInvestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroInvestorId"));

                    b.Property<decimal>("CessionCapBufferPct")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExcludedDomiciles")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExcludedFacilities")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExcludedLayerIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExcludedLayerSubNos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HurdleRate")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("InvestmentAuth")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("InvestmentAuthAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InvestmentEstimated")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("InvestmentEstimatedAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InvestmentSigned")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("InvestmentSignedAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFundsWithheld")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPortIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPortOut")
                        .HasColumnType("bit");

                    b.Property<decimal>("ManagementFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("NotionalCollateral")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Override")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("PerformanceFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("ProfitComm")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("RetroBufferType")
                        .HasColumnType("int");

                    b.Property<int>("RetroCommissionId")
                        .HasColumnType("int");

                    b.Property<string>("RetroValuesToBuffer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rhoe")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("RHOE");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("RuleDefs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpinsurerId")
                        .HasColumnType("int")
                        .HasColumnName("SPInsurerId");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetCollateral")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TargetPremium")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("RetroInvestorId")
                        .HasName("PK_dbo.RetroInvestor");

                    b.HasIndex(new[] { "RetroCommissionId" }, "IX_RetroCommissionId");

                    b.HasIndex(new[] { "SpinsurerId" }, "IX_SPInsurerId");

                    b.ToTable("RetroInvestor", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestorReset", b =>
                {
                    b.Property<int>("RetroInvestorResetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroInvestorResetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("InvestmentSigned")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("InvestmentSignedAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<int>("RetroProgramResetId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TargetCollateral")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TargetPremium")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("RetroInvestorResetId")
                        .HasName("PK_dbo.RetroInvestorReset");

                    b.HasIndex(new[] { "RetroInvestorId" }, "IX_RetroInvestorId");

                    b.HasIndex(new[] { "RetroProgramResetId" }, "IX_RetroProgramResetId");

                    b.ToTable("RetroInvestorReset", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestorZone", b =>
                {
                    b.Property<int>("RetroInvestorZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroInvestorZoneId"));

                    b.Property<double>("CessionCapAdjusted")
                        .HasColumnType("float");

                    b.Property<double>("CessionCapInitial")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopUpZoneId")
                        .HasColumnType("int");

                    b.HasKey("RetroInvestorZoneId")
                        .HasName("PK_dbo.RetroInvestorZone");

                    b.HasIndex(new[] { "RetroInvestorId", "StartDate", "TopUpZoneId" }, "UQ_RetroInvestorZone")
                        .IsUnique();

                    b.ToTable("RetroInvestorZone", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProfile", b =>
                {
                    b.Property<int>("RetroProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroProfileId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("RegisId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RetroProfileId")
                        .HasName("PK_dbo.RetroProfile");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId");

                    b.HasIndex(new[] { "DeptId" }, "IX_DeptId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_ManagerId");

                    b.HasIndex(new[] { "OfficeId" }, "IX_OfficeId");

                    b.ToTable("RetroProfile", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProgram", b =>
                {
                    b.Property<int>("RetroProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroProgramId"));

                    b.Property<bool>("AllowAutoFinalize")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApplyZonalCession")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApplyZonalRol")
                        .HasColumnType("bit")
                        .HasColumnName("CanApplyZonalROL");

                    b.Property<bool>("CanAttachCededContracts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPortInExpiredLayers")
                        .HasColumnType("bit");

                    b.Property<int>("CedeSelectionType")
                        .HasColumnType("int");

                    b.Property<decimal>("CessionCapBuffer")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("CessionType")
                        .HasColumnType("int");

                    b.Property<decimal>("CmtdInvestorColl")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CmtdPayCapacity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CmtdPremExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("DefaultRetroCommissionId")
                        .HasColumnType("int");

                    b.Property<decimal>("EstInvestorColl")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EstPayCapacity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EstPremExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasSentPortInExpiredLayers")
                        .HasColumnType("bit");

                    b.Property<decimal>("HurdleRate")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("Inception")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCededContractsIncludedInRunRules")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPortIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPortOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProjected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReplicated")
                        .HasColumnType("bit");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastFinalizeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<decimal>("ManagementFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("OriginalDeductions")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Override")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("PerformanceFee")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("ProfitComm")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("RegisSetupStatus")
                        .HasColumnType("int");

                    b.Property<string>("RegisSetupStatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetroLevelType")
                        .HasColumnType("int");

                    b.Property<int>("RetroProfileId")
                        .HasColumnType("int");

                    b.Property<int>("RetroProgramType")
                        .HasColumnType("int");

                    b.Property<decimal>("Rhoe")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("RHOE");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SignedInvestorColl")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SignedPayCapacity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SignedPremExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectFacilities")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SubjectLobs")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SubjectLOBs");

                    b.Property<string>("SubjectOfficeIds")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TgtInvestorColl")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TgtPayCapacity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TgtPremExp")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Uwyear")
                        .HasColumnType("int")
                        .HasColumnName("UWYear");

                    b.HasKey("RetroProgramId")
                        .HasName("PK_dbo.RetroProgram");

                    b.HasIndex(new[] { "DefaultRetroCommissionId" }, "IX_DefaultRetroCommissionId");

                    b.HasIndex(new[] { "RetroProfileId" }, "IX_RetroProfileId");

                    b.ToTable("RetroProgram", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProgramReset", b =>
                {
                    b.Property<int>("RetroProgramResetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroProgramResetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TargetCollateral")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TargetPremium")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("RetroProgramResetId")
                        .HasName("PK_dbo.RetroProgramReset");

                    b.HasIndex(new[] { "RetroProgramId" }, "IX_RetroProgramId");

                    b.ToTable("RetroProgramReset", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroZone", b =>
                {
                    b.Property<int>("RetroZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroZoneId"));

                    b.Property<decimal>("Cession")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<double>("CessionCap")
                        .HasColumnType("float");

                    b.Property<double>("CessionCapAdjusted")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("EllowerBound")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELLowerBound");

                    b.Property<decimal>("ElupperBound")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELUpperBound");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<decimal>("RollowerBound")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROLLowerBound");

                    b.Property<decimal>("RolupperBound")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROLUpperBound");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("TopUpZoneId")
                        .HasColumnType("int");

                    b.HasKey("RetroZoneId")
                        .HasName("PK_dbo.RetroZone");

                    b.HasIndex(new[] { "RetroProgramId", "StartDate", "TopUpZoneId" }, "UQ_RetroZoneWithStartDate")
                        .IsUnique();

                    b.ToTable("RetroZone", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroZoneOverride", b =>
                {
                    b.Property<int>("RetroZoneOverrideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetroZoneOverrideId"));

                    b.Property<decimal>("Cession")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroInvestorId")
                        .HasColumnType("int");

                    b.Property<int>("RetroZoneId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RetroZoneOverrideId")
                        .HasName("PK_dbo.RetroZoneOverride");

                    b.HasIndex("RetroZoneId");

                    b.HasIndex(new[] { "RetroInvestorId", "RetroZoneId" }, "UQ_RetroInvestorId_RetroZoneId")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("RetroZoneOverride", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskTransferAnalysis", b =>
                {
                    b.Property<int>("RiskTransferAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskTransferAnalysisId"));

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasSideAgreements")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAggLimitLess")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCatException")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDerivativeAccounting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExperienceAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFundBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFundsHeld")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLossCorridor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaintenanceFees")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoClaimBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptionsContract")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOthers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaymentTiming")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfitComm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRetroactiveContract")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlidingScale")
                        .HasColumnType("bit");

                    b.Property<string>("Layers")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("LossPercentage")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("LossProbability")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RiskTransferAnalysisNotes")
                        .HasColumnType("ntext");

                    b.Property<bool>("RiskTransferDiscussion")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("TreatyNbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Uwyear")
                        .HasColumnType("int")
                        .HasColumnName("UWYear");

                    b.HasKey("RiskTransferAnalysisId")
                        .HasName("PK_dbo.RiskTransferAnalysis");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.ToTable("RiskTransferAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskTransferAnalysisReviewer", b =>
                {
                    b.Property<int>("RiskTransferAnalysisReviewerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskTransferAnalysisReviewerId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerType")
                        .HasColumnType("int");

                    b.Property<int>("RiskTransferAnalysisId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RiskTransferAnalysisReviewerId")
                        .HasName("PK_dbo.RiskTransferAnalysisReviewer");

                    b.HasIndex(new[] { "RiskTransferAnalysisId" }, "IX_RiskTransferAnalysisId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("RiskTransferAnalysisReviewer", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskZone", b =>
                {
                    b.Property<int>("RiskZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskZoneId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IristerritoryCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IRISTerritoryCode");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("RiskZoneId")
                        .HasName("PK_dbo.RiskZone");

                    b.ToTable("RiskZone", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeAssumption", b =>
                {
                    b.Property<int>("RoeAssumptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoeAssumptionId"));

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CatastropheLossRatio")
                        .HasColumnType("float");

                    b.Property<double>("CatastropheOccurrenceLimit")
                        .HasColumnType("float");

                    b.Property<double>("CatastrophePremium")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LossTiming")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PremiumDuration")
                        .HasColumnType("float");

                    b.Property<int?>("PresetLdpid")
                        .HasColumnType("int")
                        .HasColumnName("PresetLDPId");

                    b.Property<double>("ProportionalWeight")
                        .HasColumnType("float");

                    b.Property<int>("RiskCarrier")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RoeAssumptionId")
                        .HasName("PK_dbo.RoeAssumption");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.HasIndex(new[] { "PresetLdpid" }, "IX_PresetLDPId");

                    b.ToTable("RoeAssumption", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeCapitalResult", b =>
                {
                    b.Property<int>("RoeCapitalResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoeCapitalResultId"));

                    b.Property<double?>("AgencyCapitalCharge")
                        .HasColumnType("float");

                    b.Property<double?>("AssetCharge")
                        .HasColumnType("float");

                    b.Property<double?>("CatastropheCharge")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("DiscountRateOnPremiums")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountRateOnReserves")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountedCombinedRatio")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountedLossRatio")
                        .HasColumnType("float");

                    b.Property<int>("FieldStatus")
                        .HasColumnType("int");

                    b.Property<double?>("ImpliedCatastropheMargin")
                        .HasColumnType("float");

                    b.Property<double?>("ImpliedCatastropheReserveCharge")
                        .HasColumnType("float");

                    b.Property<double?>("ImpliedMinimumCatastropheCapital")
                        .HasColumnType("float");

                    b.Property<double?>("ImpliedMinimumCatastrophePremium")
                        .HasColumnType("float");

                    b.Property<double?>("InvestmentYield")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<double?>("MaximumCatastrophePremiumToSurplus")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("OverallMinimumCapital")
                        .HasColumnType("float");

                    b.Property<double?>("OverallMinimumCapitalReturnOnEquity")
                        .HasColumnType("float");

                    b.Property<double?>("OverallMinimumPremiumToSurplus")
                        .HasColumnType("float");

                    b.Property<double?>("OverallPremiumToSurplus")
                        .HasColumnType("float");

                    b.Property<double?>("PaymentDuration")
                        .HasColumnType("float");

                    b.Property<double?>("PremiumCharge")
                        .HasColumnType("float");

                    b.Property<double?>("PresentValueUnderwritingProfit")
                        .HasColumnType("float");

                    b.Property<double?>("ReserveCharge")
                        .HasColumnType("float");

                    b.Property<double?>("ReturnOnEquity")
                        .HasColumnType("float");

                    b.Property<int>("RoeResultBasis")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("TotalCharge")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("YieldCurveDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RoeCapitalResultId")
                        .HasName("PK_dbo.RoeCapitalResult");

                    b.HasIndex(new[] { "LayerId", "FieldStatus", "LossView", "RoeResultBasis" }, "UQ_RoeCapitalResult")
                        .IsUnique();

                    b.ToTable("RoeCapitalResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeLeverageFactor", b =>
                {
                    b.Property<int>("RoeLeverageFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoeLeverageFactorId"));

                    b.Property<int>("ClassOfBusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoeAssumptionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("RoeLeverageFactorId")
                        .HasName("PK_dbo.RoeLeverageFactor");

                    b.HasIndex(new[] { "RoeAssumptionId" }, "IX_RoeAssumptionId");

                    b.ToTable("RoeLeverageFactor", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeLossDevPattern", b =>
                {
                    b.Property<int>("RoeLossDevPatternId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoeLossDevPatternId"));

                    b.Property<int>("AsOfMonth")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PaidLoss")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("RoeAssumptionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RoeLossDevPatternId")
                        .HasName("PK_dbo.RoeLossDevPattern");

                    b.HasIndex(new[] { "RoeAssumptionId" }, "IX_RoeAssumptionId");

                    b.ToTable("RoeLossDevPattern", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RoleId")
                        .HasName("PK_dbo.Role");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId")
                        .HasName("PK_dbo.RolePermission");

                    b.HasIndex(new[] { "PermissionId" }, "IX_PermissionId");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SnpLob", b =>
                {
                    b.Property<int>("SnpLobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnpLobId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PremiumFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("ReserveFactor")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SnpLobId")
                        .HasName("PK_dbo.SnpLob");

                    b.HasIndex(new[] { "Name" }, "UQ_SnpLob_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SnpLob", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Spinsurer", b =>
                {
                    b.Property<int>("SpinsurerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SPInsurerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpinsurerId"));

                    b.Property<string>("ContractId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FinalCommutationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundsWithheldAccountNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("InitialCommutationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetroProgramId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SegregatedAccount")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TrustAccountNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TrustBank")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpinsurerId")
                        .HasName("PK_dbo.SPInsurer");

                    b.HasIndex(new[] { "InsurerId" }, "IX_InsurerId");

                    b.HasIndex(new[] { "RetroProgramId" }, "IX_RetroProgramId");

                    b.ToTable("SPInsurer", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Sspoint", b =>
                {
                    b.Property<int>("SspointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SSPointId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SspointId"));

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("LossRatioFrom")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossRatioTo")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SspointId")
                        .HasName("PK_dbo.SSPoint");

                    b.HasIndex(new[] { "LayerId" }, "IX_LayerId");

                    b.ToTable("SSPoint", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SspointContract", b =>
                {
                    b.Property<int>("SspointContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SSPointContractId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SspointContractId"));

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LossRatioFrom")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("LossRatioTo")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SspointContractId")
                        .HasName("PK_dbo.SSPointContract");

                    b.HasIndex(new[] { "ContractId" }, "IX_ContractId");

                    b.ToTable("SSPointContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubDeltaPxResult", b =>
                {
                    b.Property<int>("SubDeltaPxResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubDeltaPxResultId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("GrossCapitalTvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVarAuth");

                    b.Property<double?>("GrossCapitalTvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVarQuote");

                    b.Property<double?>("GrossCapitalTvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVarSigned");

                    b.Property<double?>("GrossCapitalVarAuth")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCapitalVarQuote")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCapitalVarSigned")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlTvarArlAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArlAuth");

                    b.Property<double?>("GrossCatPmlTvarArlQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArlQuote");

                    b.Property<double?>("GrossCatPmlTvarArlSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossCatPmlTVarArlSigned");

                    b.Property<double?>("GrossCatPmlVarArlAuth")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlVarArlQuote")
                        .HasColumnType("float");

                    b.Property<double?>("GrossCatPmlVarArlSigned")
                        .HasColumnType("float");

                    b.Property<double?>("GrossRoetvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVarAuth");

                    b.Property<double?>("GrossRoetvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVarQuote");

                    b.Property<double?>("GrossRoetvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVarSigned");

                    b.Property<double?>("GrossRoevarAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarAuth");

                    b.Property<double?>("GrossRoevarCorreAuth")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarCorreAuth");

                    b.Property<double?>("GrossRoevarCorreQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarCorreQuote");

                    b.Property<double?>("GrossRoevarQuote")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarQuote");

                    b.Property<double?>("GrossRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarSigned");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("MaxCatPts")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("NetCapitalTvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVarAuth");

                    b.Property<double?>("NetCapitalTvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVarQuote");

                    b.Property<double?>("NetCapitalTvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetCapitalTVarSigned");

                    b.Property<double?>("NetCapitalVarAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetCapitalVarQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetCapitalVarSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArlAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArlQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlArlSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetCatPmlTvarArlAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArlAuth");

                    b.Property<double?>("NetCatPmlTvarArlQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArlQuote");

                    b.Property<double?>("NetCatPmlTvarArlSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetCatPmlTVarArlSigned");

                    b.Property<double?>("NetExcessReturnAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFeesAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFeesQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFeesSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVarAuth")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVarQuote")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinCapitalVarSigned")
                        .HasColumnType("float");

                    b.Property<double?>("NetMinRoevarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVarAuth");

                    b.Property<double?>("NetMinRoevarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVarQuote");

                    b.Property<double?>("NetMinRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetMinROEVarSigned");

                    b.Property<double?>("NetRoetvarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVarAuth");

                    b.Property<double?>("NetRoetvarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVarQuote");

                    b.Property<double?>("NetRoetvarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROETVarSigned");

                    b.Property<double?>("NetRoevarAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarAuth");

                    b.Property<double?>("NetRoevarQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarQuote");

                    b.Property<double?>("NetRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarSigned");

                    b.Property<double?>("NetRoevarWithFeesAuth")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFeesAuth");

                    b.Property<double?>("NetRoevarWithFeesQuote")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFeesQuote");

                    b.Property<double?>("NetRoevarWithFeesSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFeesSigned");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionPxPortfolioId")
                        .HasColumnType("int");

                    b.Property<double?>("TargetRoeAuth")
                        .HasColumnType("float");

                    b.Property<double?>("TargetRoeQuote")
                        .HasColumnType("float");

                    b.Property<double?>("TargetRoeSigned")
                        .HasColumnType("float");

                    b.HasKey("SubDeltaPxResultId")
                        .HasName("PK_dbo.SubDeltaPxResult");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.HasIndex(new[] { "SubmissionPxPortfolioId" }, "IX_SubmissionPxPortfolioId");

                    b.ToTable("SubDeltaPxResult", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubDeltaPxResultContract", b =>
                {
                    b.Property<int>("SubDeltaPxResultContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubDeltaPxResultContractId"));

                    b.Property<int>("ContractBinderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("GrossCapitalTvar")
                        .HasColumnType("float")
                        .HasColumnName("GrossCapitalTVar");

                    b.Property<double?>("GrossCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("GrossRoetvar")
                        .HasColumnType("float")
                        .HasColumnName("GrossROETVar");

                    b.Property<double?>("GrossRoevar")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LossView")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("NetCapitalVar")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturn")
                        .HasColumnType("float");

                    b.Property<double?>("NetExcessReturnWithFees")
                        .HasColumnType("float");

                    b.Property<double?>("NetRoevar")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVar");

                    b.Property<double?>("NetRoevarWithFees")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarWithFees");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("TargetRoe")
                        .HasColumnType("float");

                    b.HasKey("SubDeltaPxResultContractId")
                        .HasName("PK_dbo.SubDeltaPxResultContract");

                    b.HasIndex(new[] { "ContractBinderId" }, "IX_ContractBinderId");

                    b.ToTable("SubDeltaPxResultContract", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("ActuarialDataCheck")
                        .HasColumnType("ntext");

                    b.Property<string>("ActuarialDataLinkNotes")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("ActuarialDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActuarialNotes")
                        .HasColumnType("ntext");

                    b.Property<string>("ActuarialPriority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActuarialRanking")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ActuarialStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ActuaryId")
                        .HasColumnType("int");

                    b.Property<int?>("ActuaryPeerReviewerId")
                        .HasColumnType("int");

                    b.Property<int?>("AnalystId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Arrived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AuthDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("BrokerContactId")
                        .HasColumnType("int");

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<int>("BrokerRating")
                        .HasColumnType("int");

                    b.Property<string>("BrokerRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CedentAltName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientAdvocacyLink")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ClientAdvocacyRating")
                        .HasColumnType("int");

                    b.Property<string>("ClientAdvocacyRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CorreAuthDeadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("CorreStatus")
                        .HasColumnType("int");

                    b.Property<string>("Correspondence")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DataLinkNotes")
                        .HasColumnType("ntext");

                    b.Property<int>("DocStatus")
                        .HasColumnType("int");

                    b.Property<int>("ErclossViewAir")
                        .HasColumnType("int")
                        .HasColumnName("ERCLossViewAir");

                    b.Property<int>("ErclossViewArch")
                        .HasColumnType("int")
                        .HasColumnName("ERCLossViewArch");

                    b.Property<int>("ErclossViewRms")
                        .HasColumnType("int")
                        .HasColumnName("ERCLossViewRMS");

                    b.Property<DateTime>("ExpirationDefault")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpiringSubmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FxDateSbf")
                        .HasColumnType("datetime2")
                        .HasColumnName("FxDateSBF");

                    b.Property<decimal?>("FxRateSbfgbp")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FxRateSBFGBP");

                    b.Property<decimal?>("FxRateSbfusd")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FxRateSBFUSD");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<decimal>("Fxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FXRate");

                    b.Property<int?>("GroupBuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InceptionDefault")
                        .HasColumnType("datetime2");

                    b.Property<string>("IrisPolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IrisSla")
                        .HasColumnType("datetime2")
                        .HasColumnName("IrisSLA");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActuarialDataCheckRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActuaryPeerReviewNotRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancellable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollateralized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorreInterest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiyear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRenewal")
                        .HasColumnType("bit");

                    b.Property<int?>("LastRegisSyncByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRegisSyncDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LegalTermsId")
                        .HasColumnType("int");

                    b.Property<string>("Lmxindicator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LMXIndicator");

                    b.Property<int?>("LocalBuyerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarketShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("MdlStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModelerId")
                        .HasColumnType("int");

                    b.Property<int>("ModelingComplexity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModelingDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelingNotes")
                        .HasColumnType("ntext");

                    b.Property<int>("ModelingStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int?>("ParentSubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("PlacementYear")
                        .HasColumnType("int");

                    b.Property<int>("Pnocdays")
                        .HasColumnType("int")
                        .HasColumnName("PNOCDays");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("QuoteDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("RationaleAuth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RationaleQuote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RationaleSigned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RegisSyncStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RelshipUnderwriterId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskZoneId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StrategicNotes")
                        .HasColumnType("ntext");

                    b.Property<string>("SubmissionDataLinkNotes")
                        .HasColumnType("ntext");

                    b.Property<int>("SubmissionWriteupId")
                        .HasColumnType("int");

                    b.Property<decimal>("Surplus")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TranType")
                        .HasColumnType("int");

                    b.Property<int>("UnderwriterId")
                        .HasColumnType("int");

                    b.Property<string>("Uwnotes")
                        .HasColumnType("ntext")
                        .HasColumnName("UWNotes");

                    b.Property<int>("UwyearDefault")
                        .HasColumnType("int")
                        .HasColumnName("UWYearDefault");

                    b.HasKey("SubmissionId")
                        .HasName("PK_dbo.Submission");

                    b.HasIndex(new[] { "ActuaryId" }, "IX_ActuaryId");

                    b.HasIndex(new[] { "ActuaryPeerReviewerId" }, "IX_ActuaryPeerReviewerId");

                    b.HasIndex(new[] { "AnalystId" }, "IX_AnalystId");

                    b.HasIndex(new[] { "BrokerContactId" }, "IX_BrokerContactId");

                    b.HasIndex(new[] { "BrokerId" }, "IX_BrokerId");

                    b.HasIndex(new[] { "ExpiringSubmissionId" }, "IX_ExpiringSubmissionId");

                    b.HasIndex(new[] { "GroupBuyerId" }, "IX_GroupBuyerId");

                    b.HasIndex(new[] { "LastRegisSyncByUserId" }, "IX_LastRegisSyncByUserId");

                    b.HasIndex(new[] { "LegalTermsId" }, "IX_LegalTermsId");

                    b.HasIndex(new[] { "LocalBuyerId" }, "IX_LocalBuyerId");

                    b.HasIndex(new[] { "ModelerId" }, "IX_ModelerId");

                    b.HasIndex(new[] { "ProgramId" }, "IX_ProgramId");

                    b.HasIndex(new[] { "RelshipUnderwriterId" }, "IX_RelshipUnderwriterId");

                    b.HasIndex(new[] { "RiskZoneId" }, "IX_RiskZoneId");

                    b.HasIndex(new[] { "SubmissionWriteupId" }, "IX_SubmissionWriteupId");

                    b.HasIndex(new[] { "UnderwriterId" }, "IX_UnderwriterId");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionGuAnalysis", b =>
                {
                    b.Property<int>("SubmissionGuAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionGuAnalysisId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Fxdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FXDate");

                    b.Property<decimal>("Fxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FXRate");

                    b.Property<int>("GuAnalysisId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionGuAnalysisId")
                        .HasName("PK_dbo.SubmissionGuAnalysis");

                    b.HasIndex(new[] { "GuAnalysisId" }, "IX_GuAnalysisId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.HasIndex(new[] { "GuAnalysisId", "SubmissionId" }, "IX_Submission_GuAnalysis")
                        .IsUnique()
                        .HasFilter("([IsDeleted]=(0) AND [IsActive]=(1))");

                    b.ToTable("SubmissionGuAnalysis", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionPxPortfolio", b =>
                {
                    b.Property<int>("SubmissionPxPortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionPxPortfolioId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionPxPortfolioId")
                        .HasName("PK_dbo.SubmissionPxPortfolio");

                    b.HasIndex(new[] { "PortfolioId" }, "IX_PortfolioId");

                    b.HasIndex(new[] { "SubmissionId" }, "IX_SubmissionId");

                    b.HasIndex(new[] { "SubmissionId", "PortfolioId" }, "UQ_SubmissionId_PortfolioId")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("SubmissionPxPortfolio", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionWriteup", b =>
                {
                    b.Property<int>("SubmissionWriteupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionWriteupId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RiskFlowNotes")
                        .HasColumnType("ntext");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte[]>("SpreadsheetData")
                        .HasColumnType("image");

                    b.Property<byte[]>("UwspreadsheetData")
                        .HasColumnType("image")
                        .HasColumnName("UWSpreadsheetData");

                    b.HasKey("SubmissionWriteupId")
                        .HasName("PK_dbo.SubmissionWriteup");

                    b.ToTable("SubmissionWriteup", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EventLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotificationEventId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionId")
                        .HasName("PK_dbo.Subscription");

                    b.HasIndex(new[] { "NotificationEventId" }, "IX_NotificationEventId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.TargetPmldef", b =>
                {
                    b.Property<int>("TargetPmldefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TargetPMLDefId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TargetPmldefId"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LossAmt")
                        .HasColumnType("float");

                    b.Property<int?>("LossZoneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Peril")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PmlmatchingDefId")
                        .HasColumnType("int")
                        .HasColumnName("PMLMatchingDefId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Rp")
                        .HasColumnType("int")
                        .HasColumnName("RP");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetPmldefId")
                        .HasName("PK_dbo.TargetPMLDef");

                    b.HasIndex(new[] { "LossZoneId" }, "IX_LossZoneId");

                    b.HasIndex(new[] { "PmlmatchingDefId" }, "IX_PMLMatchingDefId");

                    b.ToTable("TargetPMLDef", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Tmpla", b =>
                {
                    b.Property<short>("Day")
                        .HasColumnType("smallint");

                    b.Property<double?>("DefaultMajorZonePct")
                        .HasColumnType("float");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Loss")
                        .HasColumnType("float");

                    b.Property<string>("MajorZone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Peril")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("tmpla", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Tmpra", b =>
                {
                    b.Property<short>("Day")
                        .HasColumnType("smallint");

                    b.Property<double?>("DefaultMajorZonePct")
                        .HasColumnType("float");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Loss")
                        .HasColumnType("float");

                    b.Property<string>("MajorZone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Peril")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("tmpra", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.TopUpZone", b =>
                {
                    b.Property<int>("TopUpZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopUpZoneId"));

                    b.Property<decimal>("Cession")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("CessionCap")
                        .HasColumnType("int");

                    b.Property<int>("CessionCapQs2")
                        .HasColumnType("int")
                        .HasColumnName("CessionCapQS2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Elthreshold")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ELThreshold");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ZoneEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("ZoneStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("TopUpZoneId")
                        .HasName("PK_dbo.TopUpZone");

                    b.HasIndex(new[] { "Name" }, "UQ_TopZoneName")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TopUpZone", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.TopUpZoneGeoMap", b =>
                {
                    b.Property<int>("TopUpZoneGeoMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopUpZoneGeoMapId"));

                    b.Property<string>("AreaCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GeoLevelCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TopUpZoneId")
                        .HasColumnType("int");

                    b.HasKey("TopUpZoneGeoMapId")
                        .HasName("PK_dbo.TopUpZoneGeoMap");

                    b.HasIndex(new[] { "TopUpZoneId" }, "IX_TopUpZoneId");

                    b.HasIndex(new[] { "GeoLevelCode", "CountryCode", "AreaCode" }, "UQ_TopUpZoneGeoMap")
                        .IsUnique()
                        .HasFilter("[GeoLevelCode] IS NOT NULL AND [CountryCode] IS NOT NULL AND [AreaCode] IS NOT NULL");

                    b.ToTable("TopUpZoneGeoMap", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AdminComments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DefaultUserLayoutId")
                        .HasColumnType("int");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExcludedOffices")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Irisuwcode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRISUWCode");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProvisionedCompanies")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegisId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisStaffCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Upn")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK_dbo.User");

                    b.HasIndex(new[] { "DeptId" }, "IX_DeptId");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "Username", "Domain" }, "UQ_DomainUsername")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.UserLayout", b =>
                {
                    b.Property<int>("UserLayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLayoutId"));

                    b.Property<string>("Layout")
                        .HasColumnType("ntext");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLayoutId")
                        .HasName("PK_dbo.UserLayout");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("UserLayout", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.UserPermission", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPermissionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPermissionId")
                        .HasName("PK_dbo.UserPermission");

                    b.HasIndex(new[] { "PermissionId" }, "IX_PermissionId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.HasIndex(new[] { "UserId", "PermissionId" }, "UQ_UserIdPermissionId")
                        .IsUnique()
                        .HasFilter("([IsActive]=(1) AND [IsDeleted]=(0))");

                    b.ToTable("UserPermission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.UserSubscription", b =>
                {
                    b.Property<int>("UserSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSubscriptionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilterCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReceiveAs")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserSubscriptionId")
                        .HasName("PK_dbo.UserSubscription");

                    b.HasIndex(new[] { "SubscriptionId" }, "IX_SubscriptionId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("UserSubscription", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwAuditDetail", b =>
                {
                    b.Property<int>("AuditDetailId")
                        .HasColumnType("int");

                    b.Property<int>("AuditEventId")
                        .HasColumnType("int");

                    b.Property<int>("AuditTxnId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OrigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwAuditDetail", "ProdSupport");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwAuditDetailLayer", b =>
                {
                    b.Property<int>("AuditDetailId")
                        .HasColumnType("int");

                    b.Property<int>("AuditEventId")
                        .HasColumnType("int");

                    b.Property<int>("AuditTxnId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwAuditDetailLayer", "ProdSupport");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwAuditDetailProgram", b =>
                {
                    b.Property<int>("AuditDetailId")
                        .HasColumnType("int");

                    b.Property<int>("AuditEventId")
                        .HasColumnType("int");

                    b.Property<int>("AuditTxnId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwAuditDetailProgram", "ProdSupport");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwAuditDetailSubmission", b =>
                {
                    b.Property<int>("AuditDetailId")
                        .HasColumnType("int");

                    b.Property<int>("AuditEventId")
                        .HasColumnType("int");

                    b.Property<int>("AuditTxnId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwAuditDetailSubmission", "ProdSupport");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwContractReviewerPending", b =>
                {
                    b.Property<int>("ContractBinderId")
                        .HasColumnType("int");

                    b.Property<string>("ContractBinderStatus")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ContractBinder Status");

                    b.Property<DateTime>("InceptionDefault")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Reviewer FirstName");

                    b.Property<string>("ReviewerLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Reviewer LastName");

                    b.Property<string>("SubmissionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnderwriterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UwyearDefault")
                        .HasColumnType("int")
                        .HasColumnName("UWYearDefault");

                    b.ToTable((string)null);

                    b.ToView("vwContractReviewerPending", "ProdSupport");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwLayer", b =>
                {
                    b.Property<decimal?>("ContractLimitUsd")
                        .HasColumnType("decimal(38, 6)")
                        .HasColumnName("ContractLimitUSD");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LossAnalysisId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwLayer", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwLayerLossSummary", b =>
                {
                    b.Property<double?>("AirEl")
                        .HasColumnType("float")
                        .HasColumnName("AirEL");

                    b.Property<double?>("ArlEl")
                        .HasColumnType("float")
                        .HasColumnName("ArlEL");

                    b.Property<double?>("Cr")
                        .HasColumnType("float")
                        .HasColumnName("CR");

                    b.Property<double?>("Er")
                        .HasColumnType("float")
                        .HasColumnName("ER");

                    b.Property<double?>("ExpectedRp")
                        .HasColumnType("float")
                        .HasColumnName("ExpectedRP");

                    b.Property<double?>("ExpectedRpamt")
                        .HasColumnType("float")
                        .HasColumnName("ExpectedRPAmt");

                    b.Property<double?>("GrossRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("GrossROEVarSigned");

                    b.Property<int>("LayerLossSummaryId")
                        .HasColumnType("int");

                    b.Property<double?>("Lr")
                        .HasColumnType("float")
                        .HasColumnName("LR");

                    b.Property<double?>("NetRoevarSigned")
                        .HasColumnType("float")
                        .HasColumnName("NetROEVarSigned");

                    b.Property<double?>("Rb")
                        .HasColumnType("float")
                        .HasColumnName("RB");

                    b.Property<double?>("RmsEl")
                        .HasColumnType("float")
                        .HasColumnName("RmsEL");

                    b.Property<double?>("StandaloneRoe")
                        .HasColumnType("float")
                        .HasColumnName("StandaloneROE");

                    b.ToTable((string)null);

                    b.ToView("vwLayerLossSummary", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwLayerLossZoneSummary", b =>
                {
                    b.Property<double>("El")
                        .HasColumnType("float")
                        .HasColumnName("EL");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int?>("LayerLossZoneSummaryId")
                        .HasColumnType("int");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<int>("LossZoneId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwLayerLossZoneSummary", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwLayerMajorZoneLossSummary", b =>
                {
                    b.Property<double>("El")
                        .HasColumnType("float")
                        .HasColumnName("EL");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int?>("LayerMajorZoneLossSummaryId")
                        .HasColumnType("int");

                    b.Property<int>("LossView")
                        .HasColumnType("int");

                    b.Property<int>("MajorZoneId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwLayerMajorZoneLossSummary", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwLayerTerm", b =>
                {
                    b.Property<decimal>("AggLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AggRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("ContractLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fxrate")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("FXRate");

                    b.Property<DateTime>("Inception")
                        .HasColumnType("datetime2");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("LimitBasis")
                        .HasColumnType("int");

                    b.Property<decimal?>("NotionalLimit")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("NotionalRol")
                        .HasColumnType("numeric(38, 20)")
                        .HasColumnName("NotionalROL");

                    b.Property<decimal>("OccLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OccRetention")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Placement")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("QuotePremium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("QuoteRol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("QuoteROL");

                    b.Property<decimal>("QuotedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Rol")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("ROL");

                    b.Property<decimal>("SignedShare")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwLayerTerms", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwLossEventSummary", b =>
                {
                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("EventCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventYear")
                        .HasColumnType("int");

                    b.Property<string>("GeographyIds")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IndustryEventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("IndustryLoss")
                        .HasColumnType("float");

                    b.Property<int>("LossEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PcscatNum")
                        .HasColumnType("int")
                        .HasColumnName("PCSCatNum");

                    b.Property<string>("Peril")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ValuationDate")
                        .HasColumnType("datetime2");

                    b.ToTable((string)null);

                    b.ToView("vwLossEventSummary", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwRolePermission", b =>
                {
                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Permission")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionState")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwRolePermission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwUser", b =>
                {
                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LegalEntCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("RegisStaffCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwUser", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwUserImplicitPermission", b =>
                {
                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LegalEntCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionState")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwUserImplicitPermission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.VwUserPermission", b =>
                {
                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LegalEntCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionState")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwUserPermission", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ZoneDefinition", b =>
                {
                    b.Property<int>("ZoneDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneDefinitionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ZoneDefinitionId")
                        .HasName("PK_dbo.ZoneDefinition");

                    b.ToTable("ZoneDefinition", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ZoneGeography", b =>
                {
                    b.Property<int>("ZoneGeographyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneGeographyId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GeographyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LossZoneId")
                        .HasColumnType("int");

                    b.Property<int>("MajorZoneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Peril")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ZoneDefinitionId")
                        .HasColumnType("int");

                    b.HasKey("ZoneGeographyId")
                        .HasName("PK_dbo.ZoneGeography");

                    b.HasIndex("GeographyId");

                    b.HasIndex(new[] { "LossZoneId" }, "IX_LossZoneId");

                    b.HasIndex(new[] { "MajorZoneId" }, "IX_MajorZoneId");

                    b.HasIndex(new[] { "ZoneDefinitionId", "GeographyId", "Peril" }, "UQ_ZoneDefGeography")
                        .IsUnique()
                        .HasFilter("[Peril] IS NOT NULL");

                    b.ToTable("ZoneGeography", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ZzzIndustryLossDupRecsImport220920", b =>
                {
                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("EstType")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("LossEventId")
                        .HasColumnType("int");

                    b.Property<int?>("RecCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("zzzIndustryLoss_DupRecs_Import_220920", (string)null);
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AlphaModelAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.AlphaGuAnalysis", "AlphaGuAnalysis")
                        .WithMany("AlphaModelAnalyses")
                        .HasForeignKey("AlphaGuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AlphaModelAnalysis_dbo.AlphaGuAnalysis_AlphaGuAnalysisId");

                    b.Navigation("AlphaGuAnalysis");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AppPref", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.AppSection", "AppSection")
                        .WithMany("AppPrefs")
                        .HasForeignKey("AppSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AppPref_dbo.AppSection_AppSectionId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("AppPrefs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AppPref_dbo.User_UserId");

                    b.Navigation("AppSection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditDetail", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.AuditEvent", "AuditEvent")
                        .WithMany("AuditDetails")
                        .HasForeignKey("AuditEventId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AuditDetail_dbo.AuditEvent_AuditEventId");

                    b.Navigation("AuditEvent");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditEvent", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.AuditTxn", "AuditTxn")
                        .WithMany("AuditEvents")
                        .HasForeignKey("AuditTxnId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AuditEvent_dbo.AuditTxn_AuditTxnId");

                    b.Navigation("AuditTxn");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Broker", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.BrokerGroup", "BrokerGroup")
                        .WithMany("Brokers")
                        .HasForeignKey("BrokerGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Broker_dbo.BrokerGroup_BrokerGroupId");

                    b.Navigation("BrokerGroup");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.BrokerContact", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Broker", "Broker")
                        .WithMany("BrokerContacts")
                        .HasForeignKey("BrokerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.BrokerContact_dbo.Broker_BrokerId");

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Cedent", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.CedentGroup", "CedentGroup")
                        .WithMany("Cedents")
                        .HasForeignKey("CedentGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Cedent_dbo.CedentGroup_CedentGroupId");

                    b.Navigation("CedentGroup");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.CedentContact", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Cedent", "Cedent")
                        .WithMany("CedentContacts")
                        .HasForeignKey("CedentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CedentContact_dbo.Cedent_CedentId");

                    b.Navigation("Cedent");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemo", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Broker", "Broker")
                        .WithMany("ClientMemos")
                        .HasForeignKey("BrokerId")
                        .HasConstraintName("FK_dbo.ClientMemo_dbo.Broker_BrokerId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("ClientMemos")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClientMemo_dbo.User_UserId");

                    b.Navigation("Broker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemoCedent", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Cedent", "Cedent")
                        .WithMany("ClientMemoCedents")
                        .HasForeignKey("CedentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClientMemoCedent_dbo.Cedent_CedentId");

                    b.HasOne("IRR.Domain.IRR.Model.ClientMemo", "ClientMemo")
                        .WithMany("ClientMemoCedents")
                        .HasForeignKey("ClientMemoId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClientMemoCedent_dbo.ClientMemo_ClientMemoId");

                    b.Navigation("Cedent");

                    b.Navigation("ClientMemo");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemoDoc", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ClientMemo", "ClientMemo")
                        .WithMany("ClientMemoDocs")
                        .HasForeignKey("ClientMemoId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClientMemoDoc_dbo.ClientMemo_ClientMemoId");

                    b.HasOne("IRR.Domain.IRR.Model.Dbfile", "Dbfile")
                        .WithMany("ClientMemoDocs")
                        .HasForeignKey("DbfileId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClientMemoDoc_dbo.DBFile_DBFileId");

                    b.Navigation("ClientMemo");

                    b.Navigation("Dbfile");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Contract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ContractBinder", "ContractBinder")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractBinderId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Contract_dbo.ContractBinder_ContractBinderId");

                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("Contracts")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Contract_dbo.Layer_LayerId");

                    b.Navigation("ContractBinder");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractBinder", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Doc", "Doc")
                        .WithMany("ContractBinders")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_dbo.ContractBinder_dbo.Doc_DocId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("ContractBinders")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ContractBinder_dbo.Submission_SubmissionId");

                    b.Navigation("Doc");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewer", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ContractBinder", "ContractBinder")
                        .WithMany("ContractReviewers")
                        .HasForeignKey("ContractBinderId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ContractReviewer_dbo.ContractBinder_ContractBinderId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("ContractReviewers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ContractReviewer_dbo.User_UserId");

                    b.Navigation("ContractBinder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewerCriterion", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ContractReviewerRule", "ContractReviewerRule")
                        .WithMany("ContractReviewerCriteria")
                        .HasForeignKey("ContractReviewerRuleId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ContractReviewerCriteria_dbo.ContractReviewerRule_ContractReviewerRuleId");

                    b.Navigation("ContractReviewerRule");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewerRule", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.User", "Reviewer")
                        .WithMany("ContractReviewerRules")
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ContractReviewerRule_dbo.User_ReviewerId");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.DeltaPxResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("DeltaPxResults")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DeltaPxResult_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.SubmissionPxPortfolio", "SubmissionPxPortfolio")
                        .WithMany("DeltaPxResults")
                        .HasForeignKey("SubmissionPxPortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DeltaPxResult_dbo.SubmissionPxPortfolio_SubmissionPxPortfolioId");

                    b.Navigation("Layer");

                    b.Navigation("SubmissionPxPortfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.DeltaPxResultContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "Contract")
                        .WithMany("DeltaPxResultContracts")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DeltaPxResultContract_dbo.Contract_ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Dept", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Office", "Office")
                        .WithMany("Depts")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Dept_dbo.Office_OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Doc", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("Docs")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Doc_dbo.Submission_SubmissionId");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ExperienceLoss", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Geography", "Geography")
                        .WithMany("ExperienceLosses")
                        .HasForeignKey("GeographyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExperienceLoss_dbo.Geography_GeographyId");

                    b.HasOne("IRR.Domain.IRR.Model.LossEstScenario", "LossEstScenario")
                        .WithMany("ExperienceLosses")
                        .HasForeignKey("LossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExperienceLoss_dbo.LossEstScenario_LossEstScenarioId");

                    b.HasOne("IRR.Domain.IRR.Model.LossEvent", "LossEvent")
                        .WithMany("ExperienceLosses")
                        .HasForeignKey("LossEventId")
                        .HasConstraintName("FK_dbo.ExperienceLoss_dbo.LossEvent_LossEventId");

                    b.Navigation("Geography");

                    b.Navigation("LossEstScenario");

                    b.Navigation("LossEvent");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Geography", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Geography", "ParentGeography")
                        .WithMany("InverseParentGeography")
                        .HasForeignKey("ParentGeographyId")
                        .HasConstraintName("FK_dbo.Geography_dbo.Geography_ParentGeographyId");

                    b.Navigation("ParentGeography");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("GuAnalyses")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("FK_dbo.GuAnalysis_dbo.Submission_SubmissionId");

                    b.HasOne("IRR.Domain.IRR.Model.ZoneDefinition", "ZoneDefinition")
                        .WithMany("GuAnalyses")
                        .HasForeignKey("ZoneDefinitionId")
                        .HasConstraintName("FK_dbo.GuAnalysis_dbo.ZoneDefinition_ZoneDefinitionId");

                    b.Navigation("Submission");

                    b.Navigation("ZoneDefinition");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuCurveAdjDef", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "SourceGuAnalysis")
                        .WithMany("GuCurveAdjDefSourceGuAnalyses")
                        .HasForeignKey("SourceGuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.GuCurveAdjDef_dbo.GuAnalysis_SourceGuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "TargetGuAnalysis")
                        .WithMany("GuCurveAdjDefTargetGuAnalyses")
                        .HasForeignKey("TargetGuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.GuCurveAdjDef_dbo.GuAnalysis_TargetGuAnalysisId");

                    b.Navigation("SourceGuAnalysis");

                    b.Navigation("TargetGuAnalysis");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuCurveAdjPmlSrc", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuCurveAdjDef", "GuCurveAdjDef")
                        .WithMany("GuCurveAdjPmlSrcs")
                        .HasForeignKey("GuCurveAdjDefId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.GuCurveAdjPmlSrc_dbo.GuCurveAdjDef_GuCurveAdjDefId");

                    b.Navigation("GuCurveAdjDef");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryCalibrationDef", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "SourceGuAnalysis")
                        .WithMany("IndustryCalibrationDefSourceGuAnalyses")
                        .HasForeignKey("SourceGuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryCalibrationDef_dbo.GuAnalysis_SourceGuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.IndustryCalibrationAnalysis", "SourceIndustryCalibrationAnalysis")
                        .WithMany("IndustryCalibrationDefs")
                        .HasForeignKey("SourceIndustryCalibrationAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryCalibrationDef_dbo.IndustryCalibrationAnalysis_SourceIndustryCalibrationAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "TargetGuAnalysis")
                        .WithMany("IndustryCalibrationDefTargetGuAnalyses")
                        .HasForeignKey("TargetGuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryCalibrationDef_dbo.GuAnalysis_TargetGuAnalysisId");

                    b.Navigation("SourceGuAnalysis");

                    b.Navigation("SourceIndustryCalibrationAnalysis");

                    b.Navigation("TargetGuAnalysis");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLoss", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Geography", "Geography")
                        .WithMany("IndustryLosses")
                        .HasForeignKey("GeographyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryLoss_dbo.Geography_GeographyId");

                    b.HasOne("IRR.Domain.IRR.Model.LossEvent", "LossEvent")
                        .WithMany("IndustryLosses")
                        .HasForeignKey("LossEventId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryLoss_dbo.LossEvent_LossEventId");

                    b.Navigation("Geography");

                    b.Navigation("LossEvent");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossSubRegion", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Geography", "Geography")
                        .WithMany("IndustryLossSubRegions")
                        .HasForeignKey("GeographyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryLossSubRegion_dbo.Geography_GeographyId");

                    b.HasOne("IRR.Domain.IRR.Model.IndustryLossRegion", "IndustryLossRegion")
                        .WithMany("IndustryLossSubRegions")
                        .HasForeignKey("IndustryLossRegionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryLossSubRegion_dbo.IndustryLossRegion_IndustryLossRegionId");

                    b.Navigation("Geography");

                    b.Navigation("IndustryLossRegion");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryOnLevelLoss", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.IndustryLoss", "IndustryLoss")
                        .WithMany("IndustryOnLevelLosses")
                        .HasForeignKey("IndustryLossId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndustryOnLevelLoss_dbo.IndustryLoss_IndustryLossId");

                    b.Navigation("IndustryLoss");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Layer", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Broker", "AcctBroker")
                        .WithMany("Layers")
                        .HasForeignKey("AcctBrokerId")
                        .HasConstraintName("FK_dbo.Layer_dbo.Broker_AcctBrokerId");

                    b.HasOne("IRR.Domain.IRR.Model.Layer", "ExpiringLayer")
                        .WithMany("InverseExpiringLayer")
                        .HasForeignKey("ExpiringLayerId")
                        .HasConstraintName("FK_dbo.Layer_dbo.Layer_ExpiringLayerId");

                    b.HasOne("IRR.Domain.IRR.Model.RiskZone", "RiskZone")
                        .WithMany("Layers")
                        .HasForeignKey("RiskZoneId")
                        .HasConstraintName("FK_dbo.Layer_dbo.RiskZone_RiskZoneId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("Layers")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Layer_dbo.Submission_SubmissionId");

                    b.Navigation("AcctBroker");

                    b.Navigation("ExpiringLayer");

                    b.Navigation("RiskZone");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerExperienceLoss", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ExperienceLoss", "ExperienceLoss")
                        .WithMany("LayerExperienceLosses")
                        .HasForeignKey("ExperienceLossId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerExperienceLoss_dbo.ExperienceLoss_ExperienceLossId");

                    b.HasOne("IRR.Domain.IRR.Model.LayerLossEstScenario", "LayerLossEstScenario")
                        .WithMany("LayerExperienceLosses")
                        .HasForeignKey("LayerLossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerExperienceLoss_dbo.LayerLossEstScenario_LayerLossEstScenarioId");

                    b.Navigation("ExperienceLoss");

                    b.Navigation("LayerLossEstScenario");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerLossAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.AlphaGuAnalysis", "AlphaGuAnalysis")
                        .WithMany("LayerLossAnalyses")
                        .HasForeignKey("AlphaGuAnalysisId")
                        .HasConstraintName("FK_dbo.LayerLossAnalysis_dbo.AlphaGuAnalysis_AlphaGuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "GuAnalysis")
                        .WithMany("LayerLossAnalyses")
                        .HasForeignKey("GuAnalysisId")
                        .HasConstraintName("FK_dbo.LayerLossAnalysis_dbo.GuAnalysis_GuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("LayerLossAnalyses")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerLossAnalysis_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.LossAnalysis", "LossAnalysis")
                        .WithMany("LayerLossAnalyses")
                        .HasForeignKey("LossAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerLossAnalysis_dbo.LossAnalysis_LossAnalysisId");

                    b.Navigation("AlphaGuAnalysis");

                    b.Navigation("GuAnalysis");

                    b.Navigation("Layer");

                    b.Navigation("LossAnalysis");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerLossEstScenario", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("LayerLossEstScenarios")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("FK_dbo.LayerLossEstScenario_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.LossEstScenario", "LossEstScenario")
                        .WithMany("LayerLossEstScenarios")
                        .HasForeignKey("LossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerLossEstScenario_dbo.LossEstScenario_LossEstScenarioId");

                    b.Navigation("Layer");

                    b.Navigation("LossEstScenario");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerMarketShareFactor", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.LayerLossEstScenario", "LayerLossEstScenario")
                        .WithMany("LayerMarketShareFactors")
                        .HasForeignKey("LayerLossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerMarketShareFactor_dbo.LayerLossEstScenario_LayerLossEstScenarioId");

                    b.HasOne("IRR.Domain.IRR.Model.MarketShareFactor", "MarketShareFactor")
                        .WithMany("LayerMarketShareFactors")
                        .HasForeignKey("MarketShareFactorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerMarketShareFactor_dbo.MarketShareFactor_MarketShareFactorId");

                    b.Navigation("LayerLossEstScenario");

                    b.Navigation("MarketShareFactor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerMarketShareLoss", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.LayerLossEstScenario", "LayerLossEstScenario")
                        .WithMany("LayerMarketShareLosses")
                        .HasForeignKey("LayerLossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerMarketShareLoss_dbo.LayerLossEstScenario_LayerLossEstScenarioId");

                    b.HasOne("IRR.Domain.IRR.Model.MarketShareLoss", "MarketShareLoss")
                        .WithMany("LayerMarketShareLosses")
                        .HasForeignKey("MarketShareLossId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerMarketShareLoss_dbo.MarketShareLoss_MarketShareLossId");

                    b.Navigation("LayerLossEstScenario");

                    b.Navigation("MarketShareLoss");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerTopUpLossContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "Contract")
                        .WithMany("LayerTopUpLossContracts")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LayerTopUpLossContract_dbo.Contract_ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LegalTerm", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.User", "LegalReviewer")
                        .WithMany("LegalTermLegalReviewers")
                        .HasForeignKey("LegalReviewerId")
                        .HasConstraintName("FK_dbo.LegalTerms_dbo.User_LegalReviewerId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "Reviewer")
                        .WithMany("LegalTermReviewers")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("FK_dbo.LegalTerms_dbo.User_ReviewerId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "Tareviewer")
                        .WithMany("LegalTermTareviewers")
                        .HasForeignKey("TareviewerId")
                        .HasConstraintName("FK_dbo.LegalTerms_dbo.User_TAReviewerId");

                    b.Navigation("LegalReviewer");

                    b.Navigation("Reviewer");

                    b.Navigation("Tareviewer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LegalTermClause", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ContractClause", "ContractClause")
                        .WithMany("LegalTermClauses")
                        .HasForeignKey("ContractClauseId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LegalTermClause_dbo.ContractClause_ContractClauseId");

                    b.HasOne("IRR.Domain.IRR.Model.LegalTerm", "LegalTerms")
                        .WithMany("LegalTermClauses")
                        .HasForeignKey("LegalTermsId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LegalTermClause_dbo.LegalTerms_LegalTermsId");

                    b.Navigation("ContractClause");

                    b.Navigation("LegalTerms");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LloydsRiskCode", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("LloydsRiskCodes")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LloydsRiskCode_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "GuAnalysis")
                        .WithMany("LossAnalyses")
                        .HasForeignKey("GuAnalysisId")
                        .HasConstraintName("FK_dbo.LossAnalysis_dbo.GuAnalysis_GuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("LossAnalyses")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LossAnalysis_dbo.Submission_SubmissionId");

                    b.Navigation("GuAnalysis");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossEstScenario", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.IndustryLossFilter", "IndustryLossFilter")
                        .WithMany("LossEstScenarios")
                        .HasForeignKey("IndustryLossFilterId")
                        .HasConstraintName("FK_dbo.LossEstScenario_dbo.IndustryLossFilter_IndustryLossFilterId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("LossEstScenarios")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("FK_dbo.LossEstScenario_dbo.Submission_SubmissionId");

                    b.Navigation("IndustryLossFilter");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossEvent", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Cedent", "Cedent")
                        .WithMany("LossEvents")
                        .HasForeignKey("CedentId")
                        .HasConstraintName("FK_dbo.LossEvent_dbo.Cedent_CedentId");

                    b.Navigation("Cedent");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossTrendFactor", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.LossEstScenario", "LossEstScenario")
                        .WithMany("LossTrendFactors")
                        .HasForeignKey("LossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LossTrendFactor_dbo.LossEstScenario_LossEstScenarioId");

                    b.Navigation("LossEstScenario");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossViewResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("LossViewResults")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LossViewResult_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossViewResultContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "Contract")
                        .WithMany("LossViewResultContracts")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LossViewResultContract_dbo.Contract_ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MarketShareFactor", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.IndustryLossSubRegion", "IndustryLossSubRegion")
                        .WithMany("MarketShareFactors")
                        .HasForeignKey("IndustryLossSubRegionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MarketShareFactor_dbo.IndustryLossSubRegion_IndustryLossSubRegionId");

                    b.HasOne("IRR.Domain.IRR.Model.LossEstScenario", "LossEstScenario")
                        .WithMany("MarketShareFactors")
                        .HasForeignKey("LossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MarketShareFactor_dbo.LossEstScenario_LossEstScenarioId");

                    b.Navigation("IndustryLossSubRegion");

                    b.Navigation("LossEstScenario");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MarketShareLoss", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.IndustryLoss", "IndustryLoss")
                        .WithMany("MarketShareLosses")
                        .HasForeignKey("IndustryLossId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MarketShareLoss_dbo.IndustryLoss_IndustryLossId");

                    b.HasOne("IRR.Domain.IRR.Model.LossEstScenario", "LossEstScenario")
                        .WithMany("MarketShareLosses")
                        .HasForeignKey("LossEstScenarioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MarketShareLoss_dbo.LossEstScenario_LossEstScenarioId");

                    b.HasOne("IRR.Domain.IRR.Model.MarketShareFactor", "MarketShareFactor")
                        .WithMany("MarketShareLosses")
                        .HasForeignKey("MarketShareFactorId")
                        .HasConstraintName("FK_dbo.MarketShareLoss_dbo.MarketShareFactor_MarketShareFactorId");

                    b.Navigation("IndustryLoss");

                    b.Navigation("LossEstScenario");

                    b.Navigation("MarketShareFactor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ModelAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "GuAnalysis")
                        .WithMany("ModelAnalyses")
                        .HasForeignKey("GuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ModelAnalysis_dbo.GuAnalysis_GuAnalysisId");

                    b.Navigation("GuAnalysis");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MultiyearShare", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("MultiyearShares")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MultiyearShare_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Office", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Company", "Company")
                        .WithMany("Offices")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Office_dbo.Company_CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PmlMatchingDef", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "SourceGuAnalysis")
                        .WithMany("PmlMatchingDefSourceGuAnalyses")
                        .HasForeignKey("SourceGuAnalysisId")
                        .HasConstraintName("FK_dbo.PmlMatchingDef_dbo.GuAnalysis_SourceGuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.IndustryGuAnalysis", "SourceIndustryAnalysis")
                        .WithMany("PmlMatchingDefs")
                        .HasForeignKey("SourceIndustryAnalysisId")
                        .HasConstraintName("FK_dbo.PmlMatchingDef_dbo.IndustryGuAnalysis_SourceIndustryAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "TargetGuAnalysis")
                        .WithMany("PmlMatchingDefTargetGuAnalyses")
                        .HasForeignKey("TargetGuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PmlMatchingDef_dbo.GuAnalysis_TargetGuAnalysisId");

                    b.Navigation("SourceGuAnalysis");

                    b.Navigation("SourceIndustryAnalysis");

                    b.Navigation("TargetGuAnalysis");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyTracker", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("PolicyTrackers")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PolicyTracker_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyTrackerDetail", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PolicyTracker", "PolicyTracker")
                        .WithMany("PolicyTrackerDetails")
                        .HasForeignKey("PolicyTrackerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PolicyTrackerDetail_dbo.PolicyTracker_PolicyTrackerId");

                    b.Navigation("PolicyTracker");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyUpdate", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("PolicyUpdates")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PolicyUpdate_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.PolicyTracker", "PolicyTracker")
                        .WithMany("PolicyUpdates")
                        .HasForeignKey("PolicyTrackerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PolicyUpdate_dbo.PolicyTracker_PolicyTrackerId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("PolicyUpdates")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PolicyUpdate_dbo.Submission_SubmissionId");

                    b.Navigation("Layer");

                    b.Navigation("PolicyTracker");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyUpdateDetail", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PolicyUpdate", "PolicyUpdate")
                        .WithMany("PolicyUpdateDetails")
                        .HasForeignKey("PolicyUpdateId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PolicyUpdateDetail_dbo.PolicyUpdate_PolicyUpdateId");

                    b.Navigation("PolicyUpdate");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PoolGuAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.LossPool", "LossPool")
                        .WithMany("PoolGuAnalyses")
                        .HasForeignKey("LossPoolId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PoolGuAnalysis_dbo.LossPool_LossPoolId");

                    b.Navigation("LossPool");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortAdj", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("PortAdjs")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortAdj_dbo.Portfolio_PortfolioId");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortAdjAction", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortAdj", "PortAdj")
                        .WithMany("PortAdjActions")
                        .HasForeignKey("PortAdjId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortAdjAction_dbo.PortAdj_PortAdjId");

                    b.Navigation("PortAdj");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayer", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("PortLayers")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayer_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.PortLayerProjectedCessionPeriod", "PortLayerProjectedCessionPeriod")
                        .WithMany("PortLayers")
                        .HasForeignKey("PortLayerProjectedCessionPeriodId")
                        .HasConstraintName("FK_dbo.PortLayer_dbo.PortLayerProjectedCessionPeriod_PortLayerProjectedCessionPeriodId");

                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("PortLayers")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayer_dbo.Portfolio_PortfolioId");

                    b.Navigation("Layer");

                    b.Navigation("PortLayerProjectedCessionPeriod");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerCession", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortLayerCessions")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerCession_dbo.PortLayer_PortLayerId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("PortLayerCessions")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerCession_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("PortLayer");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerCessionDuration", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortLayerCessionDurations")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerCessionDuration_dbo.PortLayer_PortLayerId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("PortLayerCessionDurations")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerCessionDuration_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("PortLayer");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerEarnPattern", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortLayerEarnPatterns")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerEarnPattern_dbo.PortLayer_PortLayerId");

                    b.Navigation("PortLayer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerFieldSelectionPerTypeResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortLayerFieldSelectionPerTypeResults")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerFieldSelectionPerTypeResult_dbo.PortLayer_PortLayerId");

                    b.Navigation("PortLayer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerLossDuration", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortLayerLossDurations")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerLossDuration_dbo.PortLayer_PortLayerId");

                    b.Navigation("PortLayer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerPriceResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortLayerPriceResults")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortLayerPriceResult_dbo.PortLayer_PortLayerId");

                    b.Navigation("PortLayer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortMetric", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("PortMetrics")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortMetric_dbo.Portfolio_PortfolioId");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortPeriodResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PortLayer", "PortLayer")
                        .WithMany("PortPeriodResults")
                        .HasForeignKey("PortLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortPeriodResult_dbo.PortLayer_PortLayerId");

                    b.Navigation("PortLayer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortProjectedRetro", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("PortProjectedRetros")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortProjectedRetro_dbo.Portfolio_PortfolioId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("PortProjectedRetros")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortProjectedRetro_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("Portfolio");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortRoeResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("PortRoeResults")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortRoeResult_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("PortRoeResults")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortRoeResult_dbo.Portfolio_PortfolioId");

                    b.Navigation("Layer");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortfolioFx", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("PortfolioFxes")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PortfolioFX_dbo.Portfolio_PortfolioId");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumBase", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "PremiumBaseNavigation")
                        .WithOne("PremiumBase")
                        .HasForeignKey("IRR.Domain.IRR.Model.PremiumBase", "PremiumBaseId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PremiumBase_dbo.Layer_PremiumBaseId");

                    b.Navigation("PremiumBaseNavigation");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumBaseContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "PremiumBaseContractNavigation")
                        .WithOne("PremiumBaseContract")
                        .HasForeignKey("IRR.Domain.IRR.Model.PremiumBaseContract", "PremiumBaseContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PremiumBaseContract_dbo.Contract_PremiumBaseContractId");

                    b.Navigation("PremiumBaseContractNavigation");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumInstallment", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PremiumBase", "PremiumBase")
                        .WithMany("PremiumInstallments")
                        .HasForeignKey("PremiumBaseId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PremiumInstallment_dbo.PremiumBase_PremiumBaseId");

                    b.Navigation("PremiumBase");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumInstallmentContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PremiumBaseContract", "PremiumBaseContract")
                        .WithMany("PremiumInstallmentContracts")
                        .HasForeignKey("PremiumBaseContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PremiumInstallmentContract_dbo.PremiumBaseContract_PremiumBaseContractId");

                    b.Navigation("PremiumBaseContract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PresetLdpdist", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.PresetLdp", "PresetLdp")
                        .WithMany("PresetLdpdists")
                        .HasForeignKey("PresetLdpid")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PresetLDPDist_dbo.PresetLDP_PresetLDPId");

                    b.Navigation("PresetLdp");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ProgramRoeResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("ProgramRoeResults")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ProgramRoeResult_dbo.Submission_SubmissionId");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Programme", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Cedent", "Cedent")
                        .WithMany("ProgramCedents")
                        .HasForeignKey("CedentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Program_dbo.Cedent_CedentId");

                    b.HasOne("IRR.Domain.IRR.Model.Company", "Company")
                        .WithMany("Programs")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Program_dbo.Company_CompanyId");

                    b.HasOne("IRR.Domain.IRR.Model.Dept", "Dept")
                        .WithMany("Programs")
                        .HasForeignKey("DeptId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Program_dbo.Dept_DeptId");

                    b.HasOne("IRR.Domain.IRR.Model.Office", "Office")
                        .WithMany("Programs")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Program_dbo.Office_OfficeId");

                    b.HasOne("IRR.Domain.IRR.Model.Cedent", "Reinsurer")
                        .WithMany("ProgramReinsurers")
                        .HasForeignKey("ReinsurerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Program_dbo.Cedent_ReinsurerId");

                    b.Navigation("Cedent");

                    b.Navigation("Company");

                    b.Navigation("Dept");

                    b.Navigation("Office");

                    b.Navigation("Reinsurer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PxSection", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("PxSectionLayers")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PxSection_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.Layer", "PxLayer")
                        .WithMany("PxSectionPxLayers")
                        .HasForeignKey("PxLayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PxSection_dbo.Layer_PxLayerId");

                    b.Navigation("Layer");

                    b.Navigation("PxLayer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PxSectionContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "Contract")
                        .WithMany("PxSectionContracts")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PxSectionContract_dbo.Contract_ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Rcsspoint", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroCommission", "RetroCommission")
                        .WithMany("Rcsspoints")
                        .HasForeignKey("RetroCommissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RCSSPoint_dbo.RetroCommission_RetroCommissionId");

                    b.Navigation("RetroCommission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Reinstatement", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("Reinstatements")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Reinstatement_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ReinstatementContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "Contract")
                        .WithMany("ReinstatementContracts")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ReinstatementContract_dbo.Contract_ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroAllocation", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("RetroAllocations")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroAllocation_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroAllocations")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroAllocation_dbo.RetroInvestor_RetroInvestorId");

                    b.Navigation("Layer");

                    b.Navigation("RetroInvestor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroBufferByEvent", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroBufferByEvents")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroBufferByEvent_dbo.RetroInvestor_RetroInvestorId");

                    b.Navigation("RetroInvestor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroBufferByTime", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroBufferByTimes")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroBufferByTime_dbo.RetroInvestor_RetroInvestorId");

                    b.Navigation("RetroInvestor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroCommission", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.BrokerContact", "BrokerContact")
                        .WithMany("RetroCommissions")
                        .HasForeignKey("BrokerContactId")
                        .HasConstraintName("FK_dbo.RetroCommission_dbo.BrokerContact_BrokerContactId");

                    b.HasOne("IRR.Domain.IRR.Model.Broker", "Broker")
                        .WithMany("RetroCommissions")
                        .HasForeignKey("BrokerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroCommission_dbo.Broker_BrokerId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("RetroCommissions")
                        .HasForeignKey("RetroProgramId")
                        .HasConstraintName("FK_dbo.RetroCommission_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("Broker");

                    b.Navigation("BrokerContact");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroDoc", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Dbfile", "Dbfile")
                        .WithMany("RetroDocs")
                        .HasForeignKey("DbfileId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroDoc_dbo.DBFile_DBFileId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("RetroDocs")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroDoc_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("Dbfile");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroFacilityOverride", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroFacilityOverrides")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroFacilityOverride_dbo.RetroInvestor_RetroInvestorId");

                    b.Navigation("RetroInvestor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestor", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroCommission", "RetroCommission")
                        .WithMany("RetroInvestors")
                        .HasForeignKey("RetroCommissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroInvestor_dbo.RetroCommission_RetroCommissionId");

                    b.HasOne("IRR.Domain.IRR.Model.Spinsurer", "Spinsurer")
                        .WithMany("RetroInvestors")
                        .HasForeignKey("SpinsurerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroInvestor_dbo.SPInsurer_SPInsurerId");

                    b.Navigation("RetroCommission");

                    b.Navigation("Spinsurer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestorReset", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroInvestorResets")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroInvestorReset_dbo.RetroInvestor_RetroInvestorId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgramReset", "RetroProgramReset")
                        .WithMany("RetroInvestorResets")
                        .HasForeignKey("RetroProgramResetId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroInvestorReset_dbo.RetroProgramReset_RetroProgramResetId");

                    b.Navigation("RetroInvestor");

                    b.Navigation("RetroProgramReset");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestorZone", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroInvestorZones")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroInvestorZone_dbo.RetroInvestor_RetroInvestorId");

                    b.Navigation("RetroInvestor");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProfile", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Company", "Company")
                        .WithMany("RetroProfiles")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProfile_dbo.Company_CompanyId");

                    b.HasOne("IRR.Domain.IRR.Model.Dept", "Dept")
                        .WithMany("RetroProfiles")
                        .HasForeignKey("DeptId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProfile_dbo.Dept_DeptId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "Manager")
                        .WithMany("RetroProfiles")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProfile_dbo.User_ManagerId");

                    b.HasOne("IRR.Domain.IRR.Model.Office", "Office")
                        .WithMany("RetroProfiles")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProfile_dbo.Office_OfficeId");

                    b.Navigation("Company");

                    b.Navigation("Dept");

                    b.Navigation("Manager");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProgram", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroCommission", "DefaultRetroCommission")
                        .WithMany("RetroPrograms")
                        .HasForeignKey("DefaultRetroCommissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProgram_dbo.RetroCommission_DefaultRetroCommissionId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProfile", "RetroProfile")
                        .WithMany("RetroPrograms")
                        .HasForeignKey("RetroProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProgram_dbo.RetroProfile_RetroProfileId");

                    b.Navigation("DefaultRetroCommission");

                    b.Navigation("RetroProfile");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProgramReset", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("RetroProgramResets")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroProgramReset_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroZone", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("RetroZones")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroZone_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroZoneOverride", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RetroInvestor", "RetroInvestor")
                        .WithMany("RetroZoneOverrides")
                        .HasForeignKey("RetroInvestorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroZoneOverride_dbo.RetroInvestor_RetroInvestorId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroZone", "RetroZone")
                        .WithMany("RetroZoneOverrides")
                        .HasForeignKey("RetroZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RetroZoneOverride_dbo.RetroZone_RetroZoneId");

                    b.Navigation("RetroInvestor");

                    b.Navigation("RetroZone");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskTransferAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("RiskTransferAnalyses")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RiskTransferAnalysis_dbo.Submission_SubmissionId");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskTransferAnalysisReviewer", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RiskTransferAnalysis", "RiskTransferAnalysis")
                        .WithMany("RiskTransferAnalysisReviewers")
                        .HasForeignKey("RiskTransferAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RiskTransferAnalysisReviewer_dbo.RiskTransferAnalysis_RiskTransferAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("RiskTransferAnalysisReviewers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RiskTransferAnalysisReviewer_dbo.User_UserId");

                    b.Navigation("RiskTransferAnalysis");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeAssumption", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("RoeAssumptions")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoeAssumption_dbo.Layer_LayerId");

                    b.HasOne("IRR.Domain.IRR.Model.PresetLdp", "PresetLdp")
                        .WithMany("RoeAssumptions")
                        .HasForeignKey("PresetLdpid")
                        .HasConstraintName("FK_dbo.RoeAssumption_dbo.PresetLDP_PresetLDPId");

                    b.Navigation("Layer");

                    b.Navigation("PresetLdp");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeCapitalResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("RoeCapitalResults")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoeCapitalResult_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeLeverageFactor", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RoeAssumption", "RoeAssumption")
                        .WithMany("RoeLeverageFactors")
                        .HasForeignKey("RoeAssumptionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoeLeverageFactor_dbo.RoeAssumption_RoeAssumptionId");

                    b.Navigation("RoeAssumption");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeLossDevPattern", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.RoeAssumption", "RoeAssumption")
                        .WithMany("RoeLossDevPatterns")
                        .HasForeignKey("RoeAssumptionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoeLossDevPattern_dbo.RoeAssumption_RoeAssumptionId");

                    b.Navigation("RoeAssumption");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RolePermission", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RolePermission_dbo.Permission_PermissionId");

                    b.HasOne("IRR.Domain.IRR.Model.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RolePermission_dbo.Role_RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Spinsurer", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Cedent", "Insurer")
                        .WithMany("Spinsurers")
                        .HasForeignKey("InsurerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SPInsurer_dbo.Cedent_InsurerId");

                    b.HasOne("IRR.Domain.IRR.Model.RetroProgram", "RetroProgram")
                        .WithMany("Spinsurers")
                        .HasForeignKey("RetroProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SPInsurer_dbo.RetroProgram_RetroProgramId");

                    b.Navigation("Insurer");

                    b.Navigation("RetroProgram");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Sspoint", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Layer", "Layer")
                        .WithMany("Sspoints")
                        .HasForeignKey("LayerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SSPoint_dbo.Layer_LayerId");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SspointContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Contract", "Contract")
                        .WithMany("SspointContracts")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SSPointContract_dbo.Contract_ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubDeltaPxResult", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("SubDeltaPxResults")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubDeltaPxResult_dbo.Submission_SubmissionId");

                    b.HasOne("IRR.Domain.IRR.Model.SubmissionPxPortfolio", "SubmissionPxPortfolio")
                        .WithMany("SubDeltaPxResults")
                        .HasForeignKey("SubmissionPxPortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubDeltaPxResult_dbo.SubmissionPxPortfolio_SubmissionPxPortfolioId");

                    b.Navigation("Submission");

                    b.Navigation("SubmissionPxPortfolio");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubDeltaPxResultContract", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.ContractBinder", "ContractBinder")
                        .WithMany("SubDeltaPxResultContracts")
                        .HasForeignKey("ContractBinderId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubDeltaPxResultContract_dbo.ContractBinder_ContractBinderId");

                    b.Navigation("ContractBinder");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Submission", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.User", "Actuary")
                        .WithMany("SubmissionActuaries")
                        .HasForeignKey("ActuaryId")
                        .HasConstraintName("FK_dbo.Submission_dbo.User_ActuaryId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "ActuaryPeerReviewer")
                        .WithMany("SubmissionActuaryPeerReviewers")
                        .HasForeignKey("ActuaryPeerReviewerId")
                        .HasConstraintName("FK_dbo.Submission_dbo.User_ActuaryPeerReviewerId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "Analyst")
                        .WithMany("SubmissionAnalysts")
                        .HasForeignKey("AnalystId")
                        .HasConstraintName("FK_dbo.Submission_dbo.User_AnalystId");

                    b.HasOne("IRR.Domain.IRR.Model.BrokerContact", "BrokerContact")
                        .WithMany("Submissions")
                        .HasForeignKey("BrokerContactId")
                        .HasConstraintName("FK_dbo.Submission_dbo.BrokerContact_BrokerContactId");

                    b.HasOne("IRR.Domain.IRR.Model.Broker", "Broker")
                        .WithMany("Submissions")
                        .HasForeignKey("BrokerId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Submission_dbo.Broker_BrokerId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "ExpiringSubmission")
                        .WithMany("InverseExpiringSubmission")
                        .HasForeignKey("ExpiringSubmissionId")
                        .HasConstraintName("FK_dbo.Submission_dbo.Submission_ExpiringSubmissionId");

                    b.HasOne("IRR.Domain.IRR.Model.CedentContact", "GroupBuyer")
                        .WithMany("SubmissionGroupBuyers")
                        .HasForeignKey("GroupBuyerId")
                        .HasConstraintName("FK_dbo.Submission_dbo.CedentContact_GroupBuyerId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "LastRegisSyncByUser")
                        .WithMany("SubmissionLastRegisSyncByUsers")
                        .HasForeignKey("LastRegisSyncByUserId")
                        .HasConstraintName("FK_dbo.Submission_dbo.User_LastRegisSyncByUserId");

                    b.HasOne("IRR.Domain.IRR.Model.LegalTerm", "LegalTerms")
                        .WithMany("Submissions")
                        .HasForeignKey("LegalTermsId")
                        .HasConstraintName("FK_dbo.Submission_dbo.LegalTerms_LegalTermsId");

                    b.HasOne("IRR.Domain.IRR.Model.CedentContact", "LocalBuyer")
                        .WithMany("SubmissionLocalBuyers")
                        .HasForeignKey("LocalBuyerId")
                        .HasConstraintName("FK_dbo.Submission_dbo.CedentContact_LocalBuyerId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "Modeler")
                        .WithMany("SubmissionModelers")
                        .HasForeignKey("ModelerId")
                        .HasConstraintName("FK_dbo.Submission_dbo.User_ModelerId");

                    b.HasOne("IRR.Domain.IRR.Model.Programme", "Program")
                        .WithMany("Submissions")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Submission_dbo.Program_ProgramId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "RelshipUnderwriter")
                        .WithMany("SubmissionRelshipUnderwriters")
                        .HasForeignKey("RelshipUnderwriterId")
                        .HasConstraintName("FK_dbo.Submission_dbo.User_RelshipUnderwriterId");

                    b.HasOne("IRR.Domain.IRR.Model.RiskZone", "RiskZone")
                        .WithMany("Submissions")
                        .HasForeignKey("RiskZoneId")
                        .HasConstraintName("FK_dbo.Submission_dbo.RiskZone_RiskZoneId");

                    b.HasOne("IRR.Domain.IRR.Model.SubmissionWriteup", "SubmissionWriteup")
                        .WithMany("Submissions")
                        .HasForeignKey("SubmissionWriteupId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Submission_dbo.SubmissionWriteup_SubmissionWriteupId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "Underwriter")
                        .WithMany("SubmissionUnderwriters")
                        .HasForeignKey("UnderwriterId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Submission_dbo.User_UnderwriterId");

                    b.Navigation("Actuary");

                    b.Navigation("ActuaryPeerReviewer");

                    b.Navigation("Analyst");

                    b.Navigation("Broker");

                    b.Navigation("BrokerContact");

                    b.Navigation("ExpiringSubmission");

                    b.Navigation("GroupBuyer");

                    b.Navigation("LastRegisSyncByUser");

                    b.Navigation("LegalTerms");

                    b.Navigation("LocalBuyer");

                    b.Navigation("Modeler");

                    b.Navigation("Program");

                    b.Navigation("RelshipUnderwriter");

                    b.Navigation("RiskZone");

                    b.Navigation("SubmissionWriteup");

                    b.Navigation("Underwriter");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionGuAnalysis", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.GuAnalysis", "GuAnalysis")
                        .WithMany("SubmissionGuAnalyses")
                        .HasForeignKey("GuAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubmissionGuAnalysis_dbo.GuAnalysis_GuAnalysisId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("SubmissionGuAnalyses")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubmissionGuAnalysis_dbo.Submission_SubmissionId");

                    b.Navigation("GuAnalysis");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionPxPortfolio", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Portfolio", "Portfolio")
                        .WithMany("SubmissionPxPortfolios")
                        .HasForeignKey("PortfolioId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubmissionPxPortfolio_dbo.Portfolio_PortfolioId");

                    b.HasOne("IRR.Domain.IRR.Model.Submission", "Submission")
                        .WithMany("SubmissionPxPortfolios")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SubmissionPxPortfolio_dbo.Submission_SubmissionId");

                    b.Navigation("Portfolio");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Subscription", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.NotificationEvent", "NotificationEvent")
                        .WithMany("Subscriptions")
                        .HasForeignKey("NotificationEventId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Subscription_dbo.NotificationEvent_NotificationEventId");

                    b.Navigation("NotificationEvent");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.TargetPmldef", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.LossZone", "LossZone")
                        .WithMany("TargetPmldefs")
                        .HasForeignKey("LossZoneId")
                        .HasConstraintName("FK_dbo.TargetPMLDef_dbo.LossZone_LossZoneId");

                    b.HasOne("IRR.Domain.IRR.Model.PmlMatchingDef", "PmlmatchingDef")
                        .WithMany("TargetPmldefs")
                        .HasForeignKey("PmlmatchingDefId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TargetPMLDef_dbo.PmlMatchingDef_PMLMatchingDefId");

                    b.Navigation("LossZone");

                    b.Navigation("PmlmatchingDef");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.TopUpZoneGeoMap", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.TopUpZone", "TopUpZone")
                        .WithMany("TopUpZoneGeoMaps")
                        .HasForeignKey("TopUpZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TopUpZoneGeoMap_dbo.TopUpZone_TopUpZoneId");

                    b.Navigation("TopUpZone");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.User", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Dept", "Dept")
                        .WithMany("Users")
                        .HasForeignKey("DeptId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.User_dbo.Dept_DeptId");

                    b.HasOne("IRR.Domain.IRR.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.User_dbo.Role_RoleId");

                    b.Navigation("Dept");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.UserLayout", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("UserLayouts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserLayout_dbo.User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.UserPermission", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserPermission_dbo.Permission_PermissionId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserPermission_dbo.User_UserId");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.UserSubscription", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Subscription", "Subscription")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserSubscription_dbo.Subscription_SubscriptionId");

                    b.HasOne("IRR.Domain.IRR.Model.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserSubscription_dbo.User_UserId");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ZoneGeography", b =>
                {
                    b.HasOne("IRR.Domain.IRR.Model.Geography", "Geography")
                        .WithMany("ZoneGeographies")
                        .HasForeignKey("GeographyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ZoneGeography_dbo.Geography_GeographyId");

                    b.HasOne("IRR.Domain.IRR.Model.LossZone", "LossZone")
                        .WithMany("ZoneGeographies")
                        .HasForeignKey("LossZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ZoneGeography_dbo.LossZone_LossZoneId");

                    b.HasOne("IRR.Domain.IRR.Model.MajorZone", "MajorZone")
                        .WithMany("ZoneGeographies")
                        .HasForeignKey("MajorZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ZoneGeography_dbo.MajorZone_MajorZoneId");

                    b.HasOne("IRR.Domain.IRR.Model.ZoneDefinition", "ZoneDefinition")
                        .WithMany("ZoneGeographies")
                        .HasForeignKey("ZoneDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ZoneGeography_dbo.ZoneDefinition_ZoneDefinitionId");

                    b.Navigation("Geography");

                    b.Navigation("LossZone");

                    b.Navigation("MajorZone");

                    b.Navigation("ZoneDefinition");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AlphaGuAnalysis", b =>
                {
                    b.Navigation("AlphaModelAnalyses");

                    b.Navigation("LayerLossAnalyses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AppSection", b =>
                {
                    b.Navigation("AppPrefs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditEvent", b =>
                {
                    b.Navigation("AuditDetails");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.AuditTxn", b =>
                {
                    b.Navigation("AuditEvents");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Broker", b =>
                {
                    b.Navigation("BrokerContacts");

                    b.Navigation("ClientMemos");

                    b.Navigation("Layers");

                    b.Navigation("RetroCommissions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.BrokerContact", b =>
                {
                    b.Navigation("RetroCommissions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.BrokerGroup", b =>
                {
                    b.Navigation("Brokers");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Cedent", b =>
                {
                    b.Navigation("CedentContacts");

                    b.Navigation("ClientMemoCedents");

                    b.Navigation("LossEvents");

                    b.Navigation("ProgramCedents");

                    b.Navigation("ProgramReinsurers");

                    b.Navigation("Spinsurers");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.CedentContact", b =>
                {
                    b.Navigation("SubmissionGroupBuyers");

                    b.Navigation("SubmissionLocalBuyers");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.CedentGroup", b =>
                {
                    b.Navigation("Cedents");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ClientMemo", b =>
                {
                    b.Navigation("ClientMemoCedents");

                    b.Navigation("ClientMemoDocs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Company", b =>
                {
                    b.Navigation("Offices");

                    b.Navigation("Programs");

                    b.Navigation("RetroProfiles");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Contract", b =>
                {
                    b.Navigation("DeltaPxResultContracts");

                    b.Navigation("LayerTopUpLossContracts");

                    b.Navigation("LossViewResultContracts");

                    b.Navigation("PremiumBaseContract");

                    b.Navigation("PxSectionContracts");

                    b.Navigation("ReinstatementContracts");

                    b.Navigation("SspointContracts");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractBinder", b =>
                {
                    b.Navigation("ContractReviewers");

                    b.Navigation("Contracts");

                    b.Navigation("SubDeltaPxResultContracts");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractClause", b =>
                {
                    b.Navigation("LegalTermClauses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ContractReviewerRule", b =>
                {
                    b.Navigation("ContractReviewerCriteria");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Dbfile", b =>
                {
                    b.Navigation("ClientMemoDocs");

                    b.Navigation("RetroDocs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Dept", b =>
                {
                    b.Navigation("Programs");

                    b.Navigation("RetroProfiles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Doc", b =>
                {
                    b.Navigation("ContractBinders");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ExperienceLoss", b =>
                {
                    b.Navigation("LayerExperienceLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Geography", b =>
                {
                    b.Navigation("ExperienceLosses");

                    b.Navigation("IndustryLossSubRegions");

                    b.Navigation("IndustryLosses");

                    b.Navigation("InverseParentGeography");

                    b.Navigation("ZoneGeographies");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuAnalysis", b =>
                {
                    b.Navigation("GuCurveAdjDefSourceGuAnalyses");

                    b.Navigation("GuCurveAdjDefTargetGuAnalyses");

                    b.Navigation("IndustryCalibrationDefSourceGuAnalyses");

                    b.Navigation("IndustryCalibrationDefTargetGuAnalyses");

                    b.Navigation("LayerLossAnalyses");

                    b.Navigation("LossAnalyses");

                    b.Navigation("ModelAnalyses");

                    b.Navigation("PmlMatchingDefSourceGuAnalyses");

                    b.Navigation("PmlMatchingDefTargetGuAnalyses");

                    b.Navigation("SubmissionGuAnalyses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.GuCurveAdjDef", b =>
                {
                    b.Navigation("GuCurveAdjPmlSrcs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryCalibrationAnalysis", b =>
                {
                    b.Navigation("IndustryCalibrationDefs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryGuAnalysis", b =>
                {
                    b.Navigation("PmlMatchingDefs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLoss", b =>
                {
                    b.Navigation("IndustryOnLevelLosses");

                    b.Navigation("MarketShareLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossFilter", b =>
                {
                    b.Navigation("LossEstScenarios");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossRegion", b =>
                {
                    b.Navigation("IndustryLossSubRegions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.IndustryLossSubRegion", b =>
                {
                    b.Navigation("MarketShareFactors");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Layer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DeltaPxResults");

                    b.Navigation("InverseExpiringLayer");

                    b.Navigation("LayerLossAnalyses");

                    b.Navigation("LayerLossEstScenarios");

                    b.Navigation("LloydsRiskCodes");

                    b.Navigation("LossViewResults");

                    b.Navigation("MultiyearShares");

                    b.Navigation("PolicyTrackers");

                    b.Navigation("PolicyUpdates");

                    b.Navigation("PortLayers");

                    b.Navigation("PortRoeResults");

                    b.Navigation("PremiumBase");

                    b.Navigation("PxSectionLayers");

                    b.Navigation("PxSectionPxLayers");

                    b.Navigation("Reinstatements");

                    b.Navigation("RetroAllocations");

                    b.Navigation("RoeAssumptions");

                    b.Navigation("RoeCapitalResults");

                    b.Navigation("Sspoints");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LayerLossEstScenario", b =>
                {
                    b.Navigation("LayerExperienceLosses");

                    b.Navigation("LayerMarketShareFactors");

                    b.Navigation("LayerMarketShareLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LegalTerm", b =>
                {
                    b.Navigation("LegalTermClauses");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossAnalysis", b =>
                {
                    b.Navigation("LayerLossAnalyses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossEstScenario", b =>
                {
                    b.Navigation("ExperienceLosses");

                    b.Navigation("LayerLossEstScenarios");

                    b.Navigation("LossTrendFactors");

                    b.Navigation("MarketShareFactors");

                    b.Navigation("MarketShareLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossEvent", b =>
                {
                    b.Navigation("ExperienceLosses");

                    b.Navigation("IndustryLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossPool", b =>
                {
                    b.Navigation("PoolGuAnalyses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.LossZone", b =>
                {
                    b.Navigation("TargetPmldefs");

                    b.Navigation("ZoneGeographies");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MajorZone", b =>
                {
                    b.Navigation("ZoneGeographies");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MarketShareFactor", b =>
                {
                    b.Navigation("LayerMarketShareFactors");

                    b.Navigation("MarketShareLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.MarketShareLoss", b =>
                {
                    b.Navigation("LayerMarketShareLosses");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.NotificationEvent", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Office", b =>
                {
                    b.Navigation("Depts");

                    b.Navigation("Programs");

                    b.Navigation("RetroProfiles");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PmlMatchingDef", b =>
                {
                    b.Navigation("TargetPmldefs");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyTracker", b =>
                {
                    b.Navigation("PolicyTrackerDetails");

                    b.Navigation("PolicyUpdates");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PolicyUpdate", b =>
                {
                    b.Navigation("PolicyUpdateDetails");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortAdj", b =>
                {
                    b.Navigation("PortAdjActions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayer", b =>
                {
                    b.Navigation("PortLayerCessionDurations");

                    b.Navigation("PortLayerCessions");

                    b.Navigation("PortLayerEarnPatterns");

                    b.Navigation("PortLayerFieldSelectionPerTypeResults");

                    b.Navigation("PortLayerLossDurations");

                    b.Navigation("PortLayerPriceResults");

                    b.Navigation("PortPeriodResults");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PortLayerProjectedCessionPeriod", b =>
                {
                    b.Navigation("PortLayers");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Portfolio", b =>
                {
                    b.Navigation("PortAdjs");

                    b.Navigation("PortLayers");

                    b.Navigation("PortMetrics");

                    b.Navigation("PortProjectedRetros");

                    b.Navigation("PortRoeResults");

                    b.Navigation("PortfolioFxes");

                    b.Navigation("SubmissionPxPortfolios");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumBase", b =>
                {
                    b.Navigation("PremiumInstallments");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PremiumBaseContract", b =>
                {
                    b.Navigation("PremiumInstallmentContracts");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.PresetLdp", b =>
                {
                    b.Navigation("PresetLdpdists");

                    b.Navigation("RoeAssumptions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Programme", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroCommission", b =>
                {
                    b.Navigation("Rcsspoints");

                    b.Navigation("RetroInvestors");

                    b.Navigation("RetroPrograms");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroInvestor", b =>
                {
                    b.Navigation("RetroAllocations");

                    b.Navigation("RetroBufferByEvents");

                    b.Navigation("RetroBufferByTimes");

                    b.Navigation("RetroFacilityOverrides");

                    b.Navigation("RetroInvestorResets");

                    b.Navigation("RetroInvestorZones");

                    b.Navigation("RetroZoneOverrides");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProfile", b =>
                {
                    b.Navigation("RetroPrograms");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProgram", b =>
                {
                    b.Navigation("PortLayerCessionDurations");

                    b.Navigation("PortLayerCessions");

                    b.Navigation("PortProjectedRetros");

                    b.Navigation("RetroCommissions");

                    b.Navigation("RetroDocs");

                    b.Navigation("RetroProgramResets");

                    b.Navigation("RetroZones");

                    b.Navigation("Spinsurers");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroProgramReset", b =>
                {
                    b.Navigation("RetroInvestorResets");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RetroZone", b =>
                {
                    b.Navigation("RetroZoneOverrides");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskTransferAnalysis", b =>
                {
                    b.Navigation("RiskTransferAnalysisReviewers");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RiskZone", b =>
                {
                    b.Navigation("Layers");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.RoeAssumption", b =>
                {
                    b.Navigation("RoeLeverageFactors");

                    b.Navigation("RoeLossDevPatterns");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Spinsurer", b =>
                {
                    b.Navigation("RetroInvestors");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Submission", b =>
                {
                    b.Navigation("ContractBinders");

                    b.Navigation("Docs");

                    b.Navigation("GuAnalyses");

                    b.Navigation("InverseExpiringSubmission");

                    b.Navigation("Layers");

                    b.Navigation("LossAnalyses");

                    b.Navigation("LossEstScenarios");

                    b.Navigation("PolicyUpdates");

                    b.Navigation("ProgramRoeResults");

                    b.Navigation("RiskTransferAnalyses");

                    b.Navigation("SubDeltaPxResults");

                    b.Navigation("SubmissionGuAnalyses");

                    b.Navigation("SubmissionPxPortfolios");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionPxPortfolio", b =>
                {
                    b.Navigation("DeltaPxResults");

                    b.Navigation("SubDeltaPxResults");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.SubmissionWriteup", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.Subscription", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.TopUpZone", b =>
                {
                    b.Navigation("TopUpZoneGeoMaps");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.User", b =>
                {
                    b.Navigation("AppPrefs");

                    b.Navigation("ClientMemos");

                    b.Navigation("ContractReviewerRules");

                    b.Navigation("ContractReviewers");

                    b.Navigation("LegalTermLegalReviewers");

                    b.Navigation("LegalTermReviewers");

                    b.Navigation("LegalTermTareviewers");

                    b.Navigation("RetroProfiles");

                    b.Navigation("RiskTransferAnalysisReviewers");

                    b.Navigation("SubmissionActuaries");

                    b.Navigation("SubmissionActuaryPeerReviewers");

                    b.Navigation("SubmissionAnalysts");

                    b.Navigation("SubmissionLastRegisSyncByUsers");

                    b.Navigation("SubmissionModelers");

                    b.Navigation("SubmissionRelshipUnderwriters");

                    b.Navigation("SubmissionUnderwriters");

                    b.Navigation("UserLayouts");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("IRR.Domain.IRR.Model.ZoneDefinition", b =>
                {
                    b.Navigation("GuAnalyses");

                    b.Navigation("ZoneGeographies");
                });
#pragma warning restore 612, 618
        }
    }
}
*/